{
  "id": "aquatic_energy",
  "label": "Aquatic Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [false, false],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model involves learners repreesenting the energy flow in the aquatic ecosystem
// Each student controls an EnergyRepresentation character, which is a circle indicating
// initially that they should look around, and then later what kind of energy they have picked up
// students should move around to see what kind of energy they get and how it moves between specific character types
// Note: fish and algae use energy over time, so you'll need to move quickly to keep them alive! 

prop global.visible setTo false

// =============================================================
// Add any code for global properties here (e,g. addProp)

// this property lets us track energy that is lost as heat 
// when characters convert energy to matter, or consume energy by digesting food, some of it is lost as heat
// and this property helps us track that so that we can graph it if we want.

addProp energyReleasedAsHeat number 0

// =============================================================

// this is a required keyword in case we want to run script
// every second. Most likely we will do that in specific characters instead
# PROGRAM UPDATE`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// EXPLANATION:
// The sun is one of the characters that produces energy
// Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// simple, and just needs the properties for the EnergyRepresentation characters to read
// so that they can carry the energy to other characters 

# PROGRAM INIT

addFeature Costume
addFeature Physics

// set the artworrk for the sun 
featProp Sun.Costume.costumeName setTo 'circle.json'

// Instead of sun art, we are using a generic circle, so the next line tints it yellow
featCall Sun.Costume setColorize 255 215 0

// set the size of the sun
featProp Sun.Costume.scale setTo 0.7

// This makess sure the sun is behind everything else
prop Sun.zIndex setTo 0

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'source'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// EXPLANATION:
// The fish are consumers that eat the producers (Algae) and digest them to get energy
// and to grow / make matter

# PROGRAM INIT
// The fish is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

// Setup features
addFeature Costume
addFeature Physics

// Load the fish image and re-size it
featProp Fish.Costume.costumeName setTo 'fish.png'
featProp Fish.Costume.scale setTo 0.4

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Fish.energyLevel setMax 100
prop Fish.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Fish lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Fish.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Fish.getProp('energyLevel').value - Fish.getProp('energyUse').value }}
  propPop Fish.energyLevel

  // this code sets the color of the energy bar based on how hungry the fish is
  // sated
  ifExpr {{ Fish.getProp('energyLevel').value > 50 }} [[
    featProp Fish.Costume.costumeName setTo 'fish.png'
    // Green
    featProp Fish.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Fish.getProp('energyLevel').value < 50 }} [[
    featProp Fish.Costume.costumeName setTo 'fish_hungry.png'
    // Orange
    featProp Fish.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Fish.getProp('energyLevel').value < 20 }} [[
    featProp Fish.Costume.costumeName setTo 'fish_hungry.png'
    // Red
    featProp Fish.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Fish.getProp('energyLevel').value < 1 }} [[
    featProp Fish.Costume.currentFrame setTo 2
    prop Fish.alpha setTo 0.3
    prop Fish.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'

]]

`
    },
    {
      "name": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// EXPLANATION:
// The algae is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

# PROGRAM INIT

// Setup the features 
addFeature Costume
addFeature Physics

// Set the artowrk and scale it
featProp Algae.Costume.costumeName setTo 'algae.png'
featProp Algae.Costume.scale setTo 0.2

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Algae.energyLevel setMax 100
prop Algae.energyLevel setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Algae.AgentWidgets.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Algae.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // STUDENTS_MAY_CHAANGE
  // The algae use energy to survive, so decrease energy each second
  prop Algae.energyLevel sub 1

  // re-size the algae based on its energy level so that 
  // if it has lots of energy it grows nice and big, and low energy
  // either from being eaten or just using it all up means it is shrinking and 
  // will die if it hits 0
  exprPush {{ (Algae.getProp('energyLevel').value / 100)* 0.2 }}
  featPropPop Algae.Costume.scale

  // avoid getting too small by going back up to this size
  exprPush {{ .1 }}
  featPropPop Algae.Costume.scale

  // this scripts sets the color of the energy bar next to the algae based on how it is doing
  // in terms of the amount of energy it has
  ifProp Algae.energyLevel greaterThanOrEqual 60 [[
    // Doing great - Green
    featProp Algae.AgentWidgets.meterColor setTo 65280
  ]]
  ifProp Algae.energyLevel lessThan 60 [[
      // needs some energy - Orange
    featProp Algae.AgentWidgets.meterColor setTo 16737792
  ]]
  ifProp Algae.energyLevel lessThan 30 [[
      // in trouble - Red
    featProp Algae.AgentWidgets.meterColor setTo 16711680

  ]]


]]
`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// EXPLANATION: this character doesn't do anyhting - it is just art for the background

# PROGRAM INIT

addFeature Costume
featProp Sky.Costume.costumeName setTo 'square.json'
featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featProp Sky.Costume.width setTo 800 
featProp Sky.Costume.height setTo 200 

// make sure this is always way in the back behind all 
// of the other characters
prop Sky.zIndex setTo -100


`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

// EXPLANATION:
// This is the art that the kids control

# PROGRAM INIT

addFeature Costume
addFeature Physics

// start off looking like a magnifying lense that needs to explore
featProp EnergyRepresentation.Costume.costumeName setTo 'energy_empty.png'


// setup energy properties
addProp energyLevel number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp energyType string 'none'

addFeature Touches
featCall EnergyRepresentation.Touches monitor 'Sun' c2b
featCall EnergyRepresentation.Touches monitor 'Algae' c2b
featCall EnergyRepresentation.Touches monitor 'Fish' c2b

featProp EnergyRepresentation.Costume.scale setTo 0.35

# PROGRAM UPDATE
when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featProp EnergyRepresentation.Costume.costumeName setTo 'energy_sun.png'
]]

when EnergyRepresentation centerLastTouches Sun [[

  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus is on light since the plants use it)
  prop EnergyRepresentation.energyType setTo 'source'
  prop EnergyRepresentation.energyLevel setTo 100

  featProp EnergyRepresentation.Costume.costumeName setTo 'energy_sun.png'
]]


when EnergyRepresentation centerFirstTouches Algae [[
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'energy_sun_algae.png'
  ]]

  // if you have energy from the sun, then give some energy to the algae, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifProp EnergyRepresentation.energyType equal 'source' [[
    prop EnergyRepresentation.energyType setTo 'none'

    // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop Algae.energyLevel add 50
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 50


    // featCall EnergyRepresentation.Costume setAnimatedCostume 'EnergyAnnotation_SunConv1.png' 1

    featProp Algae.Costume.glow setTo 1

  ]]
]]



when EnergyRepresentation centerLastTouches Algae [[

  // if you have no energy type, take some energy from the algae
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'using' && Algae.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'producer'

    // STUDENTS_MAY_CHANGE to alter how much energy the algae gives to a fish
    prop Algae.energyLevel sub 25
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'energy_algae.png'

  ]]

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'none'
    featProp EnergyRepresentation.Costume.costumeName setTo 'energy_algae.png'
  ]]


]]

when EnergyRepresentation centerFirstTouches Fish [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'energy_algae_fish.png'
  ]]

  // when touch Algae and type sunlight and energy isn't 0, get energy, change meter color to orange, change type to producer
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'producer' }} [[
    prop EnergyRepresentation.energyType setTo 'none'

    // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Fish.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    // featCall EnergyRepresentation.Costume setAnimatedCostume 'EnergyAnnotation_PlantConv1.png' 1
    featProp Fish.Costume.glow setTo 1


  ]]

]]

when EnergyRepresentation centerLastTouches Fish [[


  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'none'
    featProp EnergyRepresentation.Costume.costumeName setTo 'energy_fish.png'
  ]]

]]
`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false


// EXPLANATION:
// This is a timer character so that we can see how much time has passed in our model
// We can use that time to think about how long the ecosystem survives if we want 

# PROGRAM INIT

// setup features
addFeature AgentWidgets
addFeature Costume

// hide the actual art since we just want the text to displaay
featProp Timer.Costume.costumeName setTo 'onexone.json'
featProp Timer.Costume.scale setTo 1

// a property to track the time
addProp time number 0

// set the initial label and then update it below during update
featProp Timer.AgentWidgets.text setTo 'Time: 0'

# PROGRAM UPDATE
// every second, add one to the time property and display the new time in the format \"Time: #\"\"
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.AgentWidgets.text
]]

`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION: 
// This is a graph of energy lost to heat from all charaacters
// since there are lots of characters, rather than sume them up one type
// at a time, use a global variabe to track that excess heat

# PROGRAM INIT

// setup the features
addFeature Costume
addFeature AgentWidgets
addFeature Population

// hide the actual art since we just want the text to displaay
featProp GraphLostEnergy.Costume.costumeName setTo 'onexone.json'

// we want the graph to show up big
featProp GraphLostEnergy.AgentWidgets.isLargeGraphic setTo true


// using a generic name so that it is easier to change later
addProp lostEnergy number 500
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

// link the graph to this property
featProp GraphLostEnergy.AgentWidgets.graphProp setTo 'lostEnergy'

// make sure something displays with some initial text, on bottom right at first
prop GraphLostEnergy.x setTo 495
prop GraphLostEnergy.lostEnergy setTo 350
prop GraphLostEnergy.zIndex setTo 300

featProp GraphLostEnergy.AgentWidgets.text setTo 'Lost Energy From Heat'

# PROGRAM UPDATE

// Once every second or so ... 
onEvent Tick [[

  // update thee lost energy property by checking the global 
  // energyReleasedAsHeat that we are tracking within the global character
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy

]]
`
    },
    {
      "name": "EnergyInSystem",
      "scriptText": `# BLUEPRINT EnergyInSystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is a graph of the energy from all of the characters in the ecosystem combined

# PROGRAM INIT

// Setup the features
addFeature Costume
addFeature AgentWidgets
addFeature Population

// hide the actual art since we just want the text to displaay
featProp EnergyInSystem.Costume.costumeName setTo 'onexone.json'
featProp EnergyInSystem.Costume.scale setTo 1


featProp EnergyInSystem.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy number 500
prop EnergyInSystem.totalEnergy setMax 1000
prop EnergyInSystem.totalEnergy setMin 0

// to store the current values of algae and fish separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalAlgaeEnergy number 0
addProp totalFishEnergy number 0


featProp EnergyInSystem.AgentWidgets.graphProp setTo 'totalEnergy'

// make sure something displays with some initial text, on bottom right at first
prop EnergyInSystem.x setTo 495
prop EnergyInSystem.y setTo 187
prop EnergyInSystem.zIndex setTo 300

featProp EnergyInSystem.AgentWidgets.text setTo 'Energy in System'

# PROGRAM UPDATE

onEvent Tick [[

  // count up the algae
  featProp EnergyInSystem.Population.monitoredAgent setTo 'Algae'
  featProp EnergyInSystem.Population.monitoredAgentProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countAgentProp
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalAlgaeEnergy

  // count up the fish
  featProp EnergyInSystem.Population.monitoredAgent setTo 'Fish'
  featProp EnergyInSystem.Population.monitoredAgentProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countAgentProp
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalFishEnergy

  // graph the sum
  exprPush {{ EnergyInSystem.getProp('totalAlgaeEnergy').value + agent.getProp('totalFishEnergy').value }}
  propPop EnergyInSystem.totalEnergy


]]
`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background LOAD
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION
// This is just artwork for the background

# PROGRAM INIT

// Setup the features
addFeature Costume

// Setup the background art, scale it,  and move it all of the way to the back
featProp Background.Costume.costumeName setTo 'background_aquatic.png'
featProp Background.Costume.height setTo 600
featProp Background.Costume.width setTo 800
prop Background.zIndex setTo -999


// required directive
# PROGRAM UPDATE
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sunbeam",
      "bpid": "Sun",
      "initScript": `prop x setTo -292.21
prop y setTo -299.83`
    },
    {
      "id": "1",
      "label": "Fish 1",
      "bpid": "Fish",
      "initScript": `prop x setTo -297.58
prop y setTo 83.43`
    },
    {
      "id": "2",
      "label": "Algae 1",
      "bpid": "Algae",
      "initScript": `prop x setTo -288.59
prop y setTo -118.14`
    },
    {
      "id": "3",
      "label": "Algae 2",
      "bpid": "Algae",
      "initScript": `prop x setTo -124.18
prop y setTo -123.89`
    },
    {
      "id": "4",
      "label": "Fish 2",
      "bpid": "Fish",
      "initScript": `prop x setTo -119.56
prop y setTo 111.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 438.81
prop y setTo -398.87`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 516.26
prop y setTo 360.68`
    },
    {
      "id": "8",
      "label": "Energy In System Graph",
      "bpid": "EnergyInSystem",
      "initScript": `prop x setTo 511.75
prop y setTo 187`
    },
    {
      "id": "9",
      "label": "Algae 3",
      "bpid": "Algae",
      "initScript": `prop x setTo 44.81
prop y setTo -98.89`
    },
    {
      "id": "10",
      "label": "Algae 4",
      "bpid": "Algae",
      "initScript": `prop x setTo 247.79
prop y setTo -125.15`
    },
    {
      "id": "11",
      "label": "Algae 5",
      "bpid": "Algae",
      "initScript": `prop x setTo 340.27
prop y setTo -121.93`
    },
    {
      "id": "12",
      "label": "Fish 3",
      "bpid": "Fish",
      "initScript": `prop x setTo 61.65
prop y setTo 138.41`
    },
    {
      "id": "13",
      "label": "Fish 4",
      "bpid": "Fish",
      "initScript": `prop x setTo 205.24
prop y setTo 59.01`
    },
    {
      "id": "14",
      "label": "Fish 5",
      "bpid": "Fish",
      "initScript": `prop x setTo 315.8
prop y setTo 210.49`
    },
    {
      "id": "15",
      "label": "Background Image",
      "bpid": "Background",
      "initScript": `prop x setTo 0
prop y setTo  100`
    }
  ]
}
