{
  "id": "aquatic_energy",
  "label": "Aquatic Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Explanation",
      "scriptText": `# BLUEPRINT Explanation
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// ----------------------------------------------------------------------------------------------------------------
// This charaacter is meaant to explain the rest of the scripts, and is not meant to be added to the stage
// ---------------------------------------------------------------------------------------------------------------- 

// The goal of this model is to let students explore the energy in the aquatic system by being a 
// representaiton of that energy rather than a character. Therefore they will be the EenergyRepresentation
// character using either pozyx or charController 

// The system is intended to mirror the aquatic model in that energy is meant to go from the sun to algae to fish. 
// To help movivate the students, the algae and fish lose energy over time, so they will die if the users don't 
// hurry and give it to them

// The main chaaracter is therefore the EnergyRepresentation, which stuents can use to look around. As they touch
// an energy source, they will pick up / become that kind of energy
// So, a key thing to look at for is how the EnergyRepresentation character changes it's energyType as it moves around 

# PROGRAM INIT
addFeature Costume
featCall agent.Costume setCostume 'onexone.json' 0
featCall agent.Costume setScale 1

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
// The sun is one of the characters that produces energy
// Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// simple, and just needs the variables for the EnergyRepresentation to read


addFeature Costume
featCall Sun.Costume setCostume 'circle.json' 0
// Instead of sun art, we are using a generic circle, so the next line tints it yellow
featCall Sun.Costume setColorize 255 215 0
// This makess sure the sunu is behind everything else
prop Sun.zIndex setTo 0

addFeature Physics
featProp Sun.Physics.scale setTo 0.6

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType String 'source'

addFeature Global

// This is a hack, using the Sun to initaliize this variable since I know it is the first
// Character added under instances
// These next two lines check if there is a Global property called energyReleasedAsHeat, and if not,
// creates one
// The EnergyRepresentation and graphs then reference this global variable
ifExpr {{ agent.callFeatMethod('Global', 'getGlobalProp', 'energyReleasedAsHeat') == undefined }} [[
  featCall Global addGlobalProp energyReleasedAsHeat Number 0
]]

// required directive
# PROGRAM INIT

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The fish is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featCall Fish.Costume setCostume 'fish.json' 0

addFeature Physics
featProp Fish.Physics.scale setTo 1.5

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType String 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Fish.energyLevel setMax 100
prop Fish.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Fish lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Fish.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Fish.getProp('energyLevel').value - Fish.getProp('energyUse').value }}
  propPop Fish.energyLevel

  // this code sets the color of the energy bar based on how hungry the fish is
  // sated
  ifExpr {{ Fish.getProp('energyLevel').value > 50 }} [[
    featCall Fish.Costume setPose 0
    // Green
    featProp Fish.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Fish.getProp('energyLevel').value < 50 }} [[
    featCall Fish.Costume setPose 1
    // Orange
    featProp Fish.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Fish.getProp('energyLevel').value < 20 }} [[
    featCall Fish.Costume setPose 1
    // Red
    featProp Fish.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Fish.getProp('energyLevel').value < 1 }} [[
    featCall Fish.Costume setPose 2
    // featCall Movement setMovementType 'float'
    prop Fish.alpha setTo 0.3
    prop Fish.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featCall Fish.AgentWidgets bindMeterTo energyLevel

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The algae is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featCall Algae.Costume setCostume 'algae.json' 0

addFeature Physics
featProp Algae.Physics.scale setTo 3

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Algae.energyLevel setMax 100
prop Algae.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Algae lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Algae.AgentWidgets.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Algae.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Algae.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Algae.getProp('energyLevel').value - Algae.getProp('energyUse').value }}
    propPop Algae.energyLevel
  ]]

  // re-scale the algae based on its energy level
  exprPush {{ (Algae.getProp('energyLevel').value / 100)* 3 }}
  featPropPop Algae.Physics.scale

  // this code sets the color of the energy bar based on how hungry the fish is
  // set algae energy meter color
  // doing great
  ifExpr {{ Algae.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Algae.AgentWidgets.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Algae.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Algae.AgentWidgets.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Algae.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Algae.AgentWidgets.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .90 }}
    featPropPop Algae.Physics scale

  ]]


]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
//Note: this character doesn't do anyhting - it is just for show since there is no 
// other easy way to add background art
addFeature Costume
featCall Sky.Costume setCostume 'square.json' 0
featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featCall Sky.Physics setSize 800 200

// make sure this is always way in the back behind all 
// of the other characters
prop Sky.zIndex setTo -100


`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

addFeature Costume
featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0

addFeature Physics

// using this to record energyReleasedAsHeat
addFeature Global


// setup energy properties
addProp energyLevel Number 0
prop energyLevel setMax 100
prop energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp energyType String 'none'

addFeature Touches
featCall Touches monitor Sun c2b
featCall Touches monitor Algae c2b
featCall Touches monitor Fish c2b

# PROGRAM UPDATE
when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featCall Costume setCostume 'EnergyAnnotation_SunProducing1.png' 0
]]

when EnergyRepresentation centerLastTouches Sun [[
  
  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus is on light since the plants use it)
  prop energyType setTo 'source'
  prop energyLevel setTo 100

  featCall Costume setCostume 'EnergyAnnotation_Sun1.png' 0
]]
 

when EnergyRepresentation centerFirstTouches Algae [[
    ifExpr {{EnergyRepresentation.getProp('energyType').value == 'none'}} [[ 
    prop energyType setTo 'using'
    featCall Costume setCostume 'EnergyAnnotation_PlantUsing.png' 0
    ]]

  // if you have energy from the sun, then give some energy to the algae, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{EnergyRepresentation.getProp('energyType').value == 'source'}} [[ 
  prop energyType setTo 'none'

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun
  prop energyLevel setTo 0
  prop Algae.energyLevel add 50
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 50


  featCall Costume setAnimatedCostume 'EnergyAnnotation_SunConv1.png' 1

  featCall Algae.Costume setGlow 1

  ]]
]]



  when EnergyRepresentation centerLastTouches Algae [[

 // if you have no energy type, take some energy from the algae
  ifExpr {{EnergyRepresentation.getProp('energyType').value == 'using' && Algae.getProp('energyLevel').value > 25}} [[ 
  prop energyType setTo 'producer'

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gives to a fish
  prop Algae.energyLevel sub 25
  prop energyLevel add 25 
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 25

  featCall Costume setCostume 'EnergyAnnotation_Plant1.png' 0

    ]]

  ifExpr {{EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using'}} [[ 
  prop energyType setTo 'none'
  featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0
  ]]


  ]]


when EnergyRepresentation centerFirstTouches Fish [[
  
  ifExpr {{EnergyRepresentation.getProp('energyType').value == 'none'}} [[ 
    prop energyType setTo 'using'
    featCall Costume setCostume 'EnergyAnnotation_FishUsing1.png' 0
    ]]

  // when touch Algae and type sunlight and energy isn't 0, get energy, change meter color to orange, change type to producer
   ifExpr {{EnergyRepresentation.getProp('energyType').value == 'producer'}} [[ 
  prop energyType setTo 'none'   

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun, and what it does to the energy character
  prop energyLevel setTo 0
  prop Fish.energyLevel add 10
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setAnimatedCostume 'EnergyAnnotation_PlantConv1.png' 1
  featCall Fish.Costume setGlow 1


   ]]

]]

when EnergyRepresentation centerLastTouches  Fish [[
    

  ifExpr {{EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using'}} [[ 
    prop energyType setTo 'none'
    featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0
  ]]

  ]]

`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
// This character isn't interactive and just shows the tine, and decreses it every second
addFeature AgentWidgets

// hide the actual art since we just want the text to displaay
addFeature Costume
featCall Timer.Costume setCostume 'onexone.json' 0
featCall Timer.Costume setScale 1

addProp time Number 0

// set the initial label and then update it below during update
featProp Timer.AgentWidgets.text setTo 'Time: 0'

# PROGRAM UPDATE
// every second, add one to the time property and display the new time in the format \"Time: #\"\"
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.AgentWidgets.text
]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "EnergyInSysyem",
      "scriptText": `# BLUEPRINT EnergyInSysyem
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            addFeature AgentWidgets
            addFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            // using a generic name so that it is easier to change later
            addProp totalEnergy Number 500
            prop totalEnergy setMax 1000
            prop totalEnergy setMin 0

            // to store the current values of algae and fish separately
            // I could just add them up below, but this way we can see them in the inspector
            addProp totalAlgaeEnergy Number 0
            addProp totalFishEnergy Number 0

           
           featCall AgentWidgets bindGraphTo totalEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 187
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Energy in System'
  
            # PROGRAM EVENT

            onEvent Tick [[

              // count up the algae
              featProp Population monitoredAgent setTo 'Algae'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalAlgaeEnergy

              // count up the fish
              featProp Population monitoredAgent setTo 'Fish'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalFishEnergy

              // graph the sum
              exprPush {{ agent.getProp('totalAlgaeEnergy').value + agent.getProp('totalFishEnergy').value }}
              propPop totalEnergy


            ]]
`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            addFeature AgentWidgets
            addFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            addFeature Global

            // using a generic name so that it is easier to change later
            addProp lostEnergy Number 500
            prop lostEnergy setMax 1000
            prop lostEnergy setMin 0

           featCall AgentWidgets bindGraphTo lostEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 350
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Lost Energy From Heat'
  
            # PROGRAM EVENT

            onEvent Tick [[

              exprPush {{ global.getProp('energyReleasedAsHeat').value }}
              propPop lostEnergy
              
            ]]
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -315.15
prop y setTo -313.18`
    },
    {
      "id": "1",
      "label": "Fish1",
      "bpid": "Fish",
      "initScript": `prop x setTo -253.37
prop y setTo 68.88`
    },
    {
      "id": "2",
      "label": "Algae1",
      "bpid": "Algae",
      "initScript": `prop x setTo -288.59
prop y setTo -118.14`
    },
    {
      "id": "3",
      "label": "Algae2",
      "bpid": "Algae",
      "initScript": `prop x setTo -124.18
prop y setTo -123.89`
    },
    {
      "id": "4",
      "label": "Fish2",
      "bpid": "Fish",
      "initScript": `prop x setTo -119.56
prop y setTo 111.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky6",
      "bpid": "Sky",
      "initScript": `prop x setTo 0
prop y setTo -300`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 516.26
prop y setTo 360.68`
    },
    {
      "id": "8",
      "label": "Energy In System Graph",
      "bpid": "EnergyInSysyem",
      "initScript": `prop x setTo 511.75
prop y setTo 187`
    },
    {
      "id": "9",
      "label": "Algae3",
      "bpid": "Algae",
      "initScript": `prop x setTo 44.81
prop y setTo -98.89`
    },
    {
      "id": "10",
      "label": "Algae4",
      "bpid": "Algae",
      "initScript": `prop x setTo 247.79
prop y setTo -125.15`
    },
    {
      "id": "11",
      "label": "Algae5",
      "bpid": "Algae",
      "initScript": `prop x setTo 340.27
prop y setTo -121.93`
    },
    {
      "id": "12",
      "label": "Fish3",
      "bpid": "Fish",
      "initScript": `prop x setTo 61.65
prop y setTo 138.41`
    },
    {
      "id": "13",
      "label": "Fish4",
      "bpid": "Fish",
      "initScript": `prop x setTo 205.24
prop y setTo 59.01`
    },
    {
      "id": "14",
      "label": "Fish5",
      "bpid": "Fish",
      "initScript": `prop x setTo 315.8
prop y setTo 210.49`
    }
  ]
}