{
  "id": "Moths-Activity-Migration",
  "label": "Moths Activity Migration",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 4474111,
    "roundsCanLoop": true
  },
  "rounds": [
    {
      "id": "r1",
      "label": "Pick and Hide",
      "time": 30,
      "intro": "Pick a character and then if you are a moth, hide!",
      "initScript": `        

        ifExpr {{global.getProp('didAddAgentWidgets').value == false }} [[
          useFeature AgentWidgets
          prop global.didAddAgentWidgets setTo true
        ]]
        
        prop global.colorSet add 1

        // assigna all the colors
        ifExpr {{global.getProp('colorSet').value == 1}} [[
          
          // print out the color set
          featCall AgentWidgets showMessage 'We are using color set 1.'

          // set so we can loop the trees
          prop global.characterCounter setTo 0

          // loop the trees and set their color
          featCall Population agentsForEach TreeBranch [[
              prop global.characterCounter add 1
              
              ifExpr {{global.getProp('characterCounter').value == 1}} [[
                prop lightOrDark setTo 'light'
                featCall Costume setCostume 'tree_1_light.png' 0
              ]]
               ifExpr {{global.getProp('characterCounter').value == 2}} [[
                prop lightOrDark setTo 'dark'
                featCall Costume setCostume 'tree_2_dark.png' 0

              ]]
               ifExpr {{global.getProp('characterCounter').value == 3}} [[
                prop lightOrDark setTo 'light'
                featCall Costume setCostume 'tree_3_light.png' 0

              ]]

          ]]

          // set so we can loop the moths
          prop global.characterCounter setTo 0
          
          // loop the moths and set their color
          featCall Population agentsForEach Moth [[
            prop global.characterCounter add 1

            ifExpr {{global.getProp('characterCounter').value == 1}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 2}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 3}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 4}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 5}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 6}} [[ 
              prop lightOrDark setTo 'dark'
            ]]

            // re-initialize the key variables
            featCall Costume setCostume 'moth_outline.png' 0
            prop causeOfDeath setTo 'alive'
            prop agent.isInert setTo false
            prop flying setTo false

          ]]

        ]]
        
        ifExpr {{global.getProp('colorSet').value == 2}} [[

          // print out the color set
          featCall AgentWidgets showMessage 'We are using color set 2.'

                    // set so we can loop the trees
          prop global.characterCounter setTo 0

          // loop the trees and set their color
          featCall Population agentsForEach TreeBranch [[
              prop global.characterCounter add 1

              ifExpr {{global.getProp('characterCounter').value == 1}} [[

                prop lightOrDark setTo 'dark'
                featCall Costume setCostume 'tree_1_dark.png' 0

              ]]
               ifExpr {{global.getProp('characterCounter').value == 2}} [[
                prop lightOrDark setTo 'light'
                featCall Costume setCostume 'tree_2_light.png' 0

              ]]
               ifExpr {{global.getProp('characterCounter').value == 3}} [[
                prop lightOrDark setTo 'light'
                featCall Costume setCostume 'tree_3_light.png' 0
              ]]

          ]]

          // set so we can loop the moths
          prop global.characterCounter setTo 0
          
          // loop the moths and set their color
          featCall Population agentsForEach Moth [[
            prop global.characterCounter add 1

            ifExpr {{global.getProp('characterCounter').value == 1}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 2}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 3}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 4}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 5}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 6}} [[ 
              prop lightOrDark setTo 'light'
            ]]

             // re-initialize the key variables
            featCall Costume setCostume 'moth_outline.png' 0
            prop causeOfDeath setTo 'alive'
            prop flying setTo true
            prop agent.isInert setTo false
          ]]

        ]]
      
          
        ifExpr {{global.getProp('colorSet').value == 3}} [[
          // print out the color set
          featCall AgentWidgets showMessage 'We are using color set 3.'

          // set so we can loop the trees
          prop global.characterCounter setTo 0

          // loop the trees and set their color
          featCall Population agentsForEach TreeBranch [[
              prop global.characterCounter add 1
              
              ifExpr {{global.getProp('characterCounter').value == 1}} [[
                prop lightOrDark setTo 'dark'
                featCall Costume setCostume 'tree_1_dark.png' 0

              ]]
               ifExpr {{global.getProp('characterCounter').value == 2}} [[
                prop lightOrDark setTo 'dark'
                featCall Costume setCostume 'tree_2_dark.png' 0


              ]]
               ifExpr {{global.getProp('characterCounter').value == 3}} [[
                prop lightOrDark setTo 'light'
                featCall Costume setCostume 'tree_3_light.png' 0

              ]]



          ]]

          // set so we can loop the moths
          prop global.characterCounter setTo 0
          
          // loop the moths and set their color
          featCall Population agentsForEach Moth [[
            prop global.characterCounter add 1

            ifExpr {{global.getProp('characterCounter').value == 1}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 2}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 3}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 4}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 5}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 6}} [[ 
              prop lightOrDark setTo 'light'
            ]]

            // re-initialize the key variables
            featCall Costume setCostume 'moth_outline.png' 0
            prop causeOfDeath setTo 'alive'
            prop flying setTo true
            prop agent.isInert setTo false

          ]]

        ]]
        
        ifExpr {{global.getProp('colorSet').value == 4}} [[
          // print out the color set
          featCall AgentWidgets showMessage 'We are using color set 4.'

          // set so we can loop the trees
          prop global.characterCounter setTo 0

          // loop the trees and set their color
          featCall Population agentsForEach TreeBranch [[
              prop global.characterCounter add 1
              
              // since we have 3 different art templates, figure out the right one and color
              ifExpr {{agent.getProp('treeID').value == 1}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_1_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_1_dark.png' 0
                ]]
              ]]
              ifExpr {{agent.getProp('treeID').value == 2}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_2_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_2_dark.png' 0
                ]]              
              ]]
              ifExpr {{agent.getProp('treeID').value == 3}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_3_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_3_dark.png' 0
                ]]              
              ]]

              ifExpr {{global.getProp('characterCounter').value == 1}} [[
                prop lightOrDark setTo 'dark'
              ]]
               ifExpr {{global.getProp('characterCounter').value == 2}} [[
                prop lightOrDark setTo 'light'
              ]]
               ifExpr {{global.getProp('characterCounter').value == 3}} [[
                prop lightOrDark setTo 'dark'
              ]]

          ]]

          // set so we can loop the moths
          prop global.characterCounter setTo 0
          
          // loop the moths and set their color
          featCall Population agentsForEach Moth [[
            prop global.characterCounter add 1

            ifExpr {{global.getProp('characterCounter').value == 1}} [[ 
              prop lightOrDark setTo 'light'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 2}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 3}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 4}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 5}} [[ 
              prop lightOrDark setTo 'dark'
            ]]
            ifExpr {{global.getProp('characterCounter').value == 6}} [[ 
              prop lightOrDark setTo 'light'
            ]]

             // re-initialize the key variables
            featCall Costume setCostume 'moth_outline.png' 0
            prop causeOfDeath setTo 'alive'
            prop flying setTo true
            prop agent.isInert setTo false

          ]]

          // cycle again
          prop global.colorSet setTo 0
        ]]

        // predator won't do anything yet
        prop global.predatorIsActive setTo false
      `,
      "outtro": "OK, here we go. When we press start again, the pedator will start looking around.",
      "endScript": `

          featCall Population agentsForEach Moth [[
            // re-initialize the key variables on the moths before we dive into the round where they hide
            featCall Costume setCostume 'moth_outline.png' 0
            prop causeOfDeath setTo 'alive'.
            prop flying setTo true
          ]]
      `
    },
    {
      "id": "r2",
      "label": "See what happens",
      "time": 30,
      "initScript": `

        // start the predator moving
        prop global.predatorIsActive setTo true


      `,
      "outtro": "We are now showing the moth colors. How'd we do?",
      "endScript": `

          // loop the trees and show their color
          featCall Population agentsForEach TreeBranch [[
            
              // since we have 3 different art templates, figure out the right one and color
              ifExpr {{agent.getProp('treeID').value == 1}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_1_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_1_dark.png' 0
                ]]
              ]]
              ifExpr {{agent.getProp('treeID').value == 2}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_2_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_2_dark.png' 0
                ]]              
              ]]
              ifExpr {{agent.getProp('treeID').value == 3}} [[
                ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
                 featCall Costume setCostume 'tree_3_light.png' 0
                ]]
                ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
                 featCall Costume setCostume 'tree_3_dark.png' 0
                ]]              
              ]]
          ]]

        featCall Population agentsForEach Moth [[
          // if the moth is still alive 
          ifExpr {{agent.getProp('causeOfDeath').value == 'alive' }} [[ 

            // then show it's color 
            ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
              featCall agent.Costume setCostume 'moth_dark.png' 0
            ]]
            ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
              featCall agent.Costume setCostume 'moth_light.png' 0
            ]]

            // stop moving 
            prop agent.isInert setTo true 
          ]]
        ]]
      `
    }
  ],
  "blueprints": [
    {
      "id": "Moth",
      "label": "Moth",
      "scriptText": `# BLUEPRINT Moth
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume

featCall Costume setCostume 'moth_outline.png' 0

useFeature Physics
featProp Physics scale setTo 0.05

useFeature Movement
featProp Movement useAutoOrientation setTo true

useFeature Cursor

useFeature Touches
featCall Touches monitor TreeBranch c2b

useFeature AgentWidgets
useFeature Population

useFeature Global 

addProp mothID Number 0

ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'mothCount') == undefined }} [[
    featCall Global addGlobalProp mothCount Number 0
]]

prop global.mothCount add 1
propPush global.mothCount

// set the id to the current count of agents so that it keeps incrementing 
// exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Moth') + 1 }} 
propPop mothID

exprPush {{ 'Moth ' + (agent.getProp('mothID').value) }}
featPropPop AgentWidgets text

// is this a dark or light moth / tree?  This is set in the round code
addProp lightOrDark String 'dark'
// camoflageed is set automatically when a moth goes onto a branch
addProp appearscamouflaged Boolean false
// set this so we can see in inspector
prop appearscamouflaged setTo false

// this sets automatically to false when going onto a branch, and true when moving off 
addProp flying Boolean true
// we use this to pick which image to use to indicate the moth is dead. alive is used to determine that it didn't actually die ... 
addProp causeOfDeath String 'alive' // or starved, or ripped

// property to help with setting the moth randomly since we can't delcare a temp variable
addProp rndForColor Number 0

// keep track of the last tree we were on for updating last touches since they are wonky
addProp lastTreeId Number 0

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

when Moth centerFirstTouches TreeBranch [[
  propPush TreeBranch.treeID
  propPop lastTreeId

  // if the tree branch and the moth are the same color, it is now hidden 
  prop flying setTo false
  ifExpr {{ Moth.getProp('lightOrDark').value ==  TreeBranch.getProp('lightOrDark').value}} [[
    prop appearscamouflaged setTo true
  ]]
  // if not, make sure it is not appearscamouflaged
  ifExpr {{ Moth.getProp('lightOrDark').value !=  TreeBranch.getProp('lightOrDark').value}} [[
    prop appearscamouflaged setTo false
  ]]
]]

when Moth centerLastTouches TreeBranch [[

  ifExpr{{ TreeBranch.getProp('treeID').value == Moth.getProp('lastTreeId').value }} [[
  prop appearscamouflaged setTo false
  prop flying setTo true
  ]]

]]

# PROGRAM UPDATE
`
    },
    {
      "id": "TreeBranch",
      "label": "TreeBranch",
      "scriptText": `# BLUEPRINT TreeBranch
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Costume
featCall Costume setCostume 'tree_1_medium.png' 0

// note that this is updated in round
addProp lightOrDark String 'dark'

useFeature Movement

useFeature Physics

featProp Physics scale setTo 0.3

useFeature Population

addProp treeID Number 0
// set the id to the current count of agents so that it keeps incrementing 
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'TreeBranch') + 1 }} 
propPop treeID

    // since we have 3 different art templates, figure out the right one and color
    ifExpr {{agent.getProp('treeID').value == 1}} [[
      ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
        featCall Costume setCostume 'tree_1_light.png' 0
      ]]
      ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
        featCall Costume setCostume 'tree_1_dark.png' 0
      ]]
    ]]
    ifExpr {{agent.getProp('treeID').value == 2}} [[
      ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
        featCall Costume setCostume 'tree_2_light.png' 0
      ]]
      ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
        featCall Costume setCostume 'tree_2_dark.png' 0
      ]]              
    ]]
    ifExpr {{agent.getProp('treeID').value == 3}} [[
      ifExpr {{agent.getProp('lightOrDark').value == 'light'}} [[ 
        featCall Costume setCostume 'tree_3_light.png' 0
      ]]
      ifExpr {{agent.getProp('lightOrDark').value == 'dark'}} [[ 
        featCall Costume setCostume 'tree_3_dark.png' 0
      ]]              
    ]]

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE
`
    },
    {
      "id": "Predator",
      "label": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'predator_s.png' 0

useFeature Physics
featProp Physics scale setTo 0.1

addProp attackCounter Number 0
// far more frequent attacks
addProp attackCounterMax Number 5
propPush attackCounterMax
propPop attackCounter

useFeature Population
useFeature Global

ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'foundOneToKill') == undefined }} [[
    // used in the attack function to make sure we kill one each round of attacks (assuming we can find one that isn't sitting appearscamouflaged)
    featCall Global addGlobalProp foundOneToKill Boolean false

    // used to identify the set of colors for the internal rounds
    // I find it easier to loop 2 rounds and set these in an if then to copy round info 7 times ...
    // start at 0 so we can increment in round 1 code
    featCall Global addGlobalProp colorSet Number 0

    // used to help keep track of things during the round setup
    featCall Global addGlobalProp characterCounter Number 0

    // used so we can turn it on and off depending on the round in the cyce
    featCall Global addGlobalProp predatorIsActive Boolean false

    // so we only add the agentwidgets once in roudn 1
    featCall Global addGlobalProp didAddAgentWidgets Boolean false
]]

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

  every 1 runAtStart [[
    ifExpr {{ global.getProp('predatorIsActive').value == true }} [[
      prop attackCounter sub 1
      ifExpr {{ agent.getProp('attackCounter').value == 0 }} [[
        prop global.foundOneToKill setTo false

          featCall Population agentsForEach Moth [[

            // first look for a living moth that is flying
            ifExpr {{ agent.getProp('causeOfDeath').value == 'alive' && agent.getProp('flying').value == true  && global.getProp('foundOneToKill').value == false}} [[
              prop global.foundOneToKill setTo true
              prop agent.causeOfDeath setTo 'ripped'

              featCall Population createAgent PopupEffect [[
                featCall agent.Costume setAnimatedCostume 'claws1.png' 1
                featProp agent.Physics scale setTo 0.05

              ]]

              ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
                featCall agent.Costume setCostume 'moth_ripped_dark.png' 0
                prop agent.isInert setTo true
              ]]
              ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
                featCall agent.Costume setCostume 'moth_ripped_light.png' 0
                prop agent.isInert setTo true
              ]]

            ]]
          ]]

          // if no one was killed, keep going and check those who are not flying, but not appearscamouflaged
          ifExpr {{ global.getProp('foundOneToKill').value == false }} [[
            featCall Population agentsForEach Moth [[
              ifExpr {{ agent.getProp('causeOfDeath').value == 'alive' && agent.getProp('appearscamouflaged').value == false  && global.getProp('foundOneToKill').value == false }} [[
                  prop global.foundOneToKill setTo true
                  prop agent.causeOfDeath setTo 'ripped'

                  featCall Population createAgent PopupEffect [[
                    featCall agent.Costume setAnimatedCostume 'claws1.png' 1
                    featProp agent.Physics scale setTo 0.05

                  ]]

                  ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
                    featCall agent.Costume setCostume 'moth_ripped_dark.png' 0
                    prop agent.isInert setTo true
                  ]]
                  ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
                    featCall agent.Costume setCostume 'moth_ripped_light.png' 0
                    prop agent.isInert setTo true
                  ]]

              ]]
            ]]
          ]]
      
          // if still no one was killed  ... then let's look again next second so we can maybe catch someone 
          ifExpr {{ global.getProp('foundOneToKill').value == false }} [[
            prop attackCounter setTo 1
          ]]
          
          // if someone was killed above in any of the conditions, reset the counter 
          ifExpr {{ global.getProp('foundOneToKill').value == true }} [[
              propPush attackCounterMax
              propPop attackCounter
          ]]
      ]]
    ]]
  ]]
`
    },
    {
      "id": "MatchMeter",
      "label": "Match Meter",
      "scriptText": `# BLUEPRINT MatchMeter
# PROGRAM DEFINE

useFeature Population
useFeature AgentWidgets

// Make costume an invisible dot
prop skin setTo 'onexone.json'

// internal variable to be bound to the meter for the match count - see update for where it is set
addProp matchCount Number 0
prop matchCount setMin 0
prop matchCount setMax 6

useFeature Global

// used for calculating so that it doesn't fluctuate too fast
ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'tmpMatchCounter') == undefined }} [[
    featCall Global addGlobalProp tmpMatchCounter Number 0

    // in case we only want to run the meter updates while the predator is running around ... if so, set this to false, if we want it active during hiding
    // then go ahead and set this to true
    featCall Global addGlobalProp alwaysUpdateMeter Boolean true
    
]]

featProp AgentWidgets isLargeGraphic setTo true
featProp AgentWidgets meterColor setTo 65280

featCall AgentWidgets bindMeterTo matchCount
featProp AgentWidgets text setTo 'Matches: #/#'


# PROGRAM INIT
# PROGRAM EVENT

# PROGRAM UPDATE

every 0.5 runAtStart [[

  ifExpr {{global.getProp('alwaysUpdateMeter').value == true}} [[

    prop global.tmpMatchCounter setTo 0

    // iterate through the moths to see how maany are camoflaged and udpate a counter to display on the meter
    featCall Population agentsForEach Moth [[
      ifExpr {{ agent.getProp('appearscamouflaged').value == true}} [[
        prop global.tmpMatchCounter add 1

      ]]
    ]]

    propPush global.tmpMatchCounter
    propPop matchCount

    exprPush {{'Matches:' + agent.getProp('matchCount').value + '/6'}}
    featPropPop AgentWidgets text
  ]]

]]`
    },
    {
      "id": "PopupEffect",
      "label": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE

// use a circle temorarily ... 
useFeature Costume
featCall Costume setCostume 'circle.json'

useFeature Physics
useFeature Population

addProp countDown Number 2

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

every 1 runAtStart [[
  prop countDown sub 1
  ifExpr {{ agent.getProp('countDown').value == 0 }} [[
    featCall Population removeAgent
  ]]
]]
`
    },
    {
      "id": "background",
      "label": "background",
      "scriptText": `# BLUEPRINT background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'moth_sky.png' 0
featCall Costume setScale 1
// useFeature Movement
# PROGRAM EVENT

# PROGRAM UPDATE
`
    },
    {
      "id": "spirit1",
      "label": "spirit1",
      "scriptText": `# BLUEPRINT spirit1
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_1_grey.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "spirit2",
      "label": "spirit2",
      "scriptText": `# BLUEPRINT spirit2
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_2_grey.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "spirit3",
      "label": "spirit3",
      "scriptText": `# BLUEPRINT spirit3
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_3_grey.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "spirit4",
      "label": "spirit4",
      "scriptText": `# BLUEPRINT spirit4
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_4_green.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "spirit5",
      "label": "spirit5",
      "scriptText": `# BLUEPRINT spirit5
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_5_green.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "spirit6",
      "label": "spirit6",
      "scriptText": `# BLUEPRINT spirit6
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'spirit_6_green.png' 0
useFeature Movement
useFeature Cursor

`
    },
    {
      "id": "SetLabel",
      "label": "SetLabel",
      "scriptText": `# BLUEPRINT SetLabel
      # PROGRAM DEFINE
      useFeature Global
      useFeature AgentWidgets
      prop skin setTo 'onexone.json'
      featProp AgentWidgets text setTo 'Set: 0'

# PROGRAM UPDATE

every 1 runAtStart [[

          exprPush {{ 'Set: ' +  global.getProp('colorSet').value }}
          featPropPop AgentWidgets text

]]

`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Predator",
      "bpid": "Predator",
      "initScript": `prop x setTo -395.33
prop y setTo -333.63
prop orientation setTo 45
prop zIndex setTo 100
prop visible setTo false

`
    },
    {
      "id": "1",
      "label": "TreeBranch 1",
      "bpid": "TreeBranch",
      "initScript": `prop x setTo 191.18
prop y setTo -18.04
`
    },
    {
      "id": "2",
      "label": "TreeBranch 2",
      "bpid": "TreeBranch",
      "initScript": `prop x setTo -66.23
prop y setTo -2.34
`
    },
    {
      "id": "3",
      "label": "TreeBranch 3",
      "bpid": "TreeBranch",
      "initScript": `prop x setTo -336.16
prop y setTo -7.77
      `
    },
    {
      "id": "4",
      "label": "Moth 1",
      "bpid": "Moth",
      "initScript": `prop x setTo 328.92
prop y setTo -196.36`
    },
    {
      "id": "5",
      "label": "Moth 2",
      "bpid": "Moth",
      "initScript": `prop x setTo 325.22
prop y setTo -98.94`
    },
    {
      "id": "6",
      "label": "Moth 3",
      "bpid": "Moth",
      "initScript": `prop x setTo 320.40
prop y setTo -2.20`
    },
    {
      "id": "7",
      "label": "Moth 4",
      "bpid": "Moth",
      "initScript": `prop x setTo 322.52
prop y setTo 108.74`
    },
    {
      "id": "8",
      "label": "Moth 5",
      "bpid": "Moth",
      "initScript": `prop x setTo 321.26
prop y setTo 213.15`
    },
    {
      "id": "9",
      "label": "Moth 6",
      "bpid": "Moth",
      "initScript": `prop x setTo 318.71
prop y setTo 324.15`
    },
    {
      "id": "10",
      "label": "Match Meter",
      "bpid": "MatchMeter",
      "initScript": `prop x setTo 517.66
prop y setTo 371.70`
    },
    {
      "id": "100",
      "label": "background0",
      "bpid": "background",
      "initScript": `prop x setTo 0
prop y setTo 0
prop scale setTo 0.3
prop zIndex setTo -500`
    },
    {
      "id": "102",
      "label": "SetLabel102",
      "bpid": "SetLabel",
      "initScript": `prop x setTo 496.34
prop y setTo -411.91`
    },
    {
      "id": "103",
      "label": "spirit103",
      "bpid": "spirit1",
      "initScript": `prop x setTo 192.69
prop y setTo 191.51`
    },
    {
      "id": "104",
      "label": "spirit2104",
      "bpid": "spirit2",
      "initScript": `prop x setTo -292.10
prop y setTo 3.69`
    },
    {
      "id": "105",
      "label": "spirit3105",
      "bpid": "spirit3",
      "initScript": `prop x setTo 198.48
prop y setTo -74.88`
    },
    {
      "id": "106",
      "label": "spirit4106",
      "bpid": "spirit4",
      "initScript": `prop x setTo -56.99
prop y setTo 239.13`
    },
    {
      "id": "107",
      "label": "spirit5107",
      "bpid": "spirit5",
      "initScript": `prop x setTo -48.98
prop y setTo 102.45`
    },
    {
      "id": "108",
      "label": "spirit6108",
      "bpid": "spirit6",
      "initScript": `prop x setTo -329.67
prop y setTo 128.31`
    }
  ]
}