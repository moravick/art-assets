{
  "id": "BlackDeath1",
  "label": "Black Death Model",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [false, false],
    "bounce": true,
    "bgcolor": 13882323,
    "roundsCanLoop": false,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "id": "r1",
      "label": "Before Times",
      "time": 10,
      "intro": "Before Times Intro",
      "outtro": "",
      "initScript": `dbgOut 'roundDef: Round1'`,
      "endScript": `dbgOut 'END Round!'`
    },
    {
      "id": "r2",
      "label": "Plague Strikes",
      "time": 20,
      "intro": "Thee Plague Strikes Town",
      "outtro": "",
      "initScript": `dbgOut 'roundDef: Round2'`,
      "endScript": `dbgOut 'END Round!'`
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT

prop global.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Person",
      "scriptText": `# BLUEPRINT Person
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population
addFeature Graphing

// setup the costume
featProp Person.Costume.costumeName setTo 'PP_person_neutral.png'
featProp Person.Costume.scale setTo 0.7

// make sure we track interactions with other people
featCall Person.Touches monitor 'Person' b2b
featCall Person.Touches monitor 'Space' b2b
featCall Person.Touches monitor 'Food' b2b

// 🔎 WHAT are the properties of people?
// Do they currently have the plague?
addProp hasPlague boolean false

// How wealthy are they?  This will impact access to food.
addProp wealth number 5
prop Person.wealth setMin 0
prop Person.wealth setMax 10

// How much energylevel do they have?  Need food for energylevel
addProp energylevel number 5
prop Person.energylevel setMin 0
prop Person.energylevel setMax 10

// How healthy are they generally in terms of nutrition?
// for simplicity of modeling, start at 5 (middle of the road) and go up for eating good food
addProp nutritionLevel number 5
prop Person.nutritionLevel setMin 0
prop Person.nutritionLevel setMax 10

featProp Person.Graphing.meterProp setTo 'energylevel'

// Set name
exprPush {{'$:' + Person.getProp('wealth').value + '; ' + 'Nutrition:' + Person.getProp('nutritionLevel').value }}
featPropPop Person.Graphing.text 

# PROGRAM UPDATE

every 1 runAtStart [[
  // People use energylevel over time
  // prop Person.energylevel sub 1
  exprPush {{'$:' + Person.getProp('wealth').value + '; ' + 'Nutrition:' + Person.getProp('nutritionLevel').value }}
  featPropPop Person.Graphing.text 
]]

when Person firstTouches Person [[
  // glow to show we are interacting
  featProp Person.Costume.glow setTo 1

  // TODO Check for plague

]]

when Person firstTouches Space [[
  // if the space has a higher wealth than the person, make them feel unwelcome
  ifExpr {{ Space.getProp('wealth').value > Person.getProp('wealth').value }} [[
    featCall Person.Population createCharacter PopupEffect [[
      prop agent.textToUse setTo 'You are not welcome!'
    ]]
  ]]
]]

when Person firstTouches Food [[
  // glow to show we are interacting
  featProp Person.Costume.glow setTo 1

  // If you cant afford the food, you are notified, if you can, get some nutrition and energylevel
  ifExpr {{ Food.getProp('wealth').value > Person.getProp('wealth').value }} [[
    featCall Person.Population createCharacter PopupEffect [[
      prop agent.textToUse setTo 'You cannot afford this!'
    ]]
  ]]
  ifExpr {{ Person.getProp('wealth').value > Food.getProp('wealth').value }} [[
    prop Person.energylevel add 1
    // If the food nutrition is higher than person, increase it for the person
    // otherwise lower it
    ifExpr {{ Food.getProp('nutritionLevel').value > Person.getProp('nutritionLevel').value }} [[
      prop Person.nutritionLevel add 1
    ]]
    ifExpr {{ Food.getProp('nutritionLevel').value < Person.getProp('nutritionLevel').value }} [[
      prop Person.nutritionLevel sub 1
    ]]
  ]]
]]`
    },
    {
      "name": "Space",
      "scriptText": `# BLUEPRINT Space
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

// Setup costume
featProp Space.Costume.costumeName setTo 'GEN_square.json'
prop Space.zIndex setTo -200

// 🔎 WHAT are the properties of spaces?
// 🔎 Note that many people perceive these as being ranked, rather than
// 🔎 simply different, and therefore that is how they are represented in the scriptaddProp perceivedColor Number 0

// How wealthy is the space?  This will impact who is welcome.
addProp wealth number 5
prop Space.wealth setMin 0
prop Space.wealth setMax 10

# PROGRAM UPDATE`
    },
    {
      "name": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population

featProp PopupEffect.Costume.costumeName setTo 'GEN_onexone.json'
featProp PopupEffect.Graphing.text setTo ''
prop PopupEffect.zIndex setTo 500

addProp costumeToUse string ''
addProp textToUse string 'TEST'
addProp countDown Number 2

# PROGRAM UPDATE

every 0.1 runAtStart [[
  ifProp PopupEffect.costumeToUse notEqual '' [[
    propPush PopupEffect.costumeToUse
    featPropPop PopupEffect.Costume.costumeName
    prop PopupEffect.costumeToUse setTo ''
  ]]

  ifProp PopupEffect.textToUse notEqual '' [[
    propPush PopupEffect.textToUse
    featPropPop PopupEffect.Graphing.text
    prop PopupEffect.textToUse setTo ''
  ]]
]]
every 1 runAtStart [[

  prop PopupEffect.countDown sub 1
  ifExpr {{ agent.getProp('countDown').value == 0 }} [[
    featCall PopupEffect.Population removeCharacter
  ]]
]]`
    },
    {
      "name": "Food",
      "scriptText": `# BLUEPRINT Food
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

// Add features we need for this character
addFeature Costume
addFeature Physics

// Setup the costume
featProp Food.Costume.costumeName setTo 'DC_tomato.png'
featProp Food.Costume.scale setTo 0.2

// how expensive is the food
addProp wealth number 5
prop Food.wealth setMin 0
prop Food.wealth setMax 10

// how nutritional is the food
addProp nutritionLevel number 5
prop Food.nutritionLevel setMin 0
prop Food.nutritionLevel setMax 10

# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "2",
      "label": "Wealthy Space",
      "bpid": "Space",
      "initScript": `prop x setTo -271.37
prop y setTo -272.55
prop wealth setTo 10
`
    },
    {
      "id": "3",
      "label": "Average Space",
      "bpid": "Space",
      "initScript": `prop x setTo 268.93
prop y setTo -273.32
prop wealth setTo 5
`
    },
    {
      "id": "4",
      "label": "Poor Space",
      "bpid": "Space",
      "initScript": `prop x setTo -269.55
prop y setTo 256.66
prop wealth setTo 2
`
    },
    {
      "id": "5",
      "label": "Great food",
      "bpid": "Food",
      "initScript": `prop x setTo -342.15
prop y setTo -338.28
prop nutritionLevel setTo 9`
    },
    {
      "id": "6",
      "label": "Average food",
      "bpid": "Food",
      "initScript": `prop x setTo 303.96
prop y setTo -306.74
prop nutritionLevel setTo 5`
    },
    {
      "id": "7",
      "label": "Poor food",
      "bpid": "Food",
      "initScript": `prop x setTo -328.40
prop y setTo 304.29
prop nutritionLevel setTo 2`
    }
  ]
}
