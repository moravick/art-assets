{
  "id": "BlackDeath1",
  "label": "Black Death Model",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 13882323,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT

// 🔎 WHAT DOES THIS MODEL DO?
// 🔎 This starter model is inteded to help users explore how people interacting with each other
// 🔎 might impact the other people. The existing code mirrors a basic disease spread scenario for 
// 🔎 some sample code to muck with
// 🔎 Change this description once you are ready to share the model so others know how it is supposed to work.

prop global.visible setTo false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Person",
      "scriptText": `# BLUEPRINT Person
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


# PROGRAM INIT
// add features
addFeature Costume
addFeature Graphing
addFeature Physics
addFeature Touches

// setup the costume
featProp Person.Costume.costumeName setTo 'PP_person_neutral.png'
featProp Person.Costume.scale setTo 0.5

// make sure we track interactions with other people
featCall Person.Touches monitor 'Person' b2b
featCall Person.Touches monitor 'Space' b2b

// 🔎 WHAT are the properties of people? 
// 🔎 Note that many people perceive these as being ranked, rather than 
// 🔎 simply different, and therefore that is how they are represented in the script
addProp perceivedColor Number 0
addProp perceivedType Number 0
addProp perceivedKnowledge Number 0
addProp perceivedValue Number 0
addProp mood Number 0

// display the meter if relevant
// featCall agent.Graphing bindMeterTo energy

# PROGRAM UPDATE
// This is stuff that happens at particular events such as Start (when the start button is pushed) or Tick (every second or so)
// This is also where you can handle touches between characters such as When Algae touches Fish
  
// TO DO
// Update color to match color
// report perceivedKnowledge
// report perceivedValue

  when Person firstTouches Person [[
    // glow to show we are interacting
    featProp Person.Costume.glow setTo 1

    // TO DO
    // If it is someone else
    // If they are same rank or higher
    // give them some perceivedKnowledge
    // If they are beneath you, look unhappy
    // If they are same, neutral

  ]]

  when Person firstTouches Space [[
      featProp Person.Costume.glow setTo 1

    // TO DO
    // If the space is the same rank or lower
    // gain knowledge
    // if it is too high, bad things happen

  ]]
`
    },
    {
      "name": "Space",
      "scriptText": `# BLUEPRINT Space
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT
addFeature Costume
addFeature Physics

// Setup costume
featProp Space.Costume.costumeName setTo 'GEN_square.json'
prop Space.zIndex setTo -200

// 🔎 WHAT are the properties of spaces? 
// 🔎 Note that many people perceive these as being ranked, rather than 
// 🔎 simply different, and therefore that is how they are represented in the scriptaddProp perceivedColor Number 0
addProp perceivedType Number 0
addProp perceivedKnowledge Number 0
addProp perceivedValue Number 0

# PROGRAM UPDATE

// TO DO
// Update color to match color
// report perceivedKnowledge
// report perceivedValue

`
    },  
      {
      "id": "PopupEffect",
      "label": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM INIT

// use a circle temorarily ...
addFeature Costume
addFeature Physics
addFeaturePopulation

featProp PopupEffect.Costume.costumeName setTo 'circle.json'

addProp countDown Number 2

# PROGRAM UPDATE

every 1 runAtStart [[
  prop PopupEffect.countDown sub 1
  ifExpr {{ agent.getProp('countDown').value == 0 }} [[
    featCall PopupEffect.Population removeAgent
  ]]
]]
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Person 1",
      "bpid": "Person",
      "initScript": `prop x setTo -242.33
prop y setTo -24.97`
    },
    {
      "id": "1",
      "label": "Person 2",
      "bpid": "Person",
      "initScript": `prop x setTo 187.66
prop y setTo 48.13`
    },
    {
      "id": "2",
      "label": "Space 1",
      "bpid": "Space",
      "initScript": `prop x setTo -271.37
prop y setTo -272.55`
    },
    {
      "id": "3",
      "label": "Space 2",
      "bpid": "Space",
      "initScript": `prop x setTo 268.93
prop y setTo -273.32`
    },
    {
      "id": "4",
      "label": "Space 3",
      "bpid": "Space",
      "initScript": `prop x setTo -269.55
prop y setTo 256.66`
    }
  ]
}