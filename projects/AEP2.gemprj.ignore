{
  "id": "AEP2",
  "label": "Aquatic Energy Play 2",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "EnergyBall",
      "label": "EnergyBall",
      "scriptText": `# BLUEPRINT EnergyBall
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'circle.json' 0

useFeature Physics

addProp creatorID String 'undefined'
addProp myID String 'undefined'

// sset the size 
featProp Physics scale setTo 0.01
`
    },
    {
      "id": "Sun",
      "label": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'circle.json' 0
featCall Costume setColorize 255 215 0
prop zIndex setTo 0

useFeature Physics
featProp Physics scale setTo 0.6

// types to use for energy transfer: source, producer, consumer (we might add more later)
// INQ: I'd like to possibly make a base class that has these types, but for now they help us 
// to both branch below, and to highlight what kind of entity this is for kids
addProp eType String 'source'

// used for identifying the energy balls associated with this character
addProp myCreatorId String 'undefined'

useFeature Global

// setup global variables to pass in the info needed for the energy ball placement
// this feels a bit unintuitive but should work for now
// INQ: how would you do this?

  // INQ: Because of  the potential timing issues, I prefer to check if the variables exist and then create them ... 
  // in other models that was necessary (e.g., looping a round) but here it might be overkill? 

  // create a global counter if it doesn't exist
  ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'energyBallIncrement') == undefined }} [[
    // a global count of things using energyBalls since I didn't see an easy way to get IDs to later find the balls
    featCall Global addGlobalProp energyBallOwnerCount Number 0

    // energyBallIncrement will let us basically loop through as we set id's in the energy ball so they are easier to find later 
    featCall Global addGlobalProp energyBallIncrement Number 0

    // location for bottom ball, with x remaining the same and y getting incremented
    featCall Global addGlobalProp energyBallX Number 0
    featCall Global addGlobalProp energyBallY Number 0

    // size of energy balls
    featCall Global addGlobalProp energyBallSize Number 0

    // space between balls, based on size
    featCall Global addGlobalProp energyBallSpacing Number 0

    // color - for now, hard-code in each Costume, but it could go here
    // INQ - I wasn't sure if this would carry as a number so I just didn't bother


  ]]

// INQ: I was gonna set this here so it is part of this, but it seems easier to just set it to the global for passing in (below)
// addProp energyBallSize Number 0.3

useFeature Population

# PROGRAM INIT

// INQ: I want to basically create 10 of these, next to the sun, and at different heights
// I struggled to figure out how to pass in the positions and ids and ultiamately went with globals

// setup the global variables that will let us do the population spawning - see the sun or where they are first created
featCall Global globalProp energyBallIncrement setTo 0
featCall Global globalProp energyBallX setTo -360
featCall Global globalProp energyBallY setTo -245
featCall Global globalProp energyBallSpacing setTo -15
featCall Global globalProp energyBallSize setTo 0.05

// increment the creator ID and then keep track of which creator this is for finding the energy balls later
featCall Global globalProp energyBallOwnerCount add 1

// INQ is there a better way to reference this?
exprPush {{ global.getProp('energyBallOwnerCount').value }}
propPop myCreatorId

// spawn 10 ernergyballs next to the sun
featProp Population targetPopulationSize setTo 10
featProp Population deleteAfterSpawning setTo false
featCall Population populateBySpawning EnergyBall [[
//  <initScript>

  // place ball based on X and Y passed in
  propPush global.energyBallX
  propPop x

  propPush global.energyBallY
  propPop y

  propPush global.energyBallSize
  featPropPop Physics scale

  featCall Costume setColorize 255 215 0

  exprPush {{global.getProp('energyBallY').value + global.getProp('energyBallSpacing').value}}
  propPop global.energyBallY

  // tell each ball who owns it (set locally above) [TODO]
  propPush global.energyBallOwnerCount
  propPop agent.creatorID

  propPush global.energyBallIncrement
  propPop agent.myID
  
  // Increase the energyBallCount for those associated with this specific creator
  // INQ I was unsure at first how to access the global here - it was a bit confusing
  exprPush {{global.getProp('energyBallIncrement').value + 1}}
  propPop global.energyBallIncrement

]]


# PROGRAM UPDATE
// every second - for any other character related to the energy cycle, but the sun has effectively infinite energy so ignore
// update the current energy level
// update the visibility of the balls based on  the current energy

`
    },
    {
      "id": "Fish",
      "label": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'fish.json' 0

useFeature Physics
featProp Physics scale setTo 1.5

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 5
prop energyLevel setMax 10
prop energyLevel setMin 0

// this shadow variable will help us know what is displayed and adapt it as needed
addProp displayEnergyLevel Number 0
prop displayEnergyLevel setMax 10
prop displayEnergyLevel setMin 0

// what size should energyBalls be scaled to?
addProp energyBallSize Number 0.1

// STUDENTS_MAY_CHANGE to make Fish lose energy faster (or slower)
addProp energyUse Number 1

// used for identifying the energy balls associated with this character
addProp myCreatorId String 'undefined'

useFeature Global

useFeature Population

# PROGRAM INIT

// INQ: This is a copy and paste from the sun with new numbers. Ideally we'll eventually have some way of using 
// features or inheritance to minimize that kind of redundancy. If you see better ways here, please let me know.
// Of course, this is more complex then a kid might even try for, but it'd still be nice to streamline for us if we can

// setup the global variables that will let us do the population spawning - see the sun or where they are first created

// TODO: Use pop and push to set these to reflect this specific current agent
// ONCE THAT IS WORKING, do an onUPDATE to update which are visible

featCall Global globalProp energyBallIncrement setTo 0

// INQ I wanted to place this here in init, after the initScript but am realizing that it comes before
// so I am again wishing there was some other call because I keep expecting it to be define, then initscrip, then program init 

// TODO move this to after the darn thing is placed
// create and hide here, but then go ahead and place when updating coloring every
// single tick or similar that way they'll move and re-color

// set the x and y based on this current character instance 
exprPush {{ (agent.getProp('x').value - 20) }} 
featPropPop Global energyBallX
exprPush {{ (agent.getProp('y').value - 80) }} 
featPropPop Global energyBallY

// comment out so we can use the prior settings for now?
// featCall Global globalProp energyBallSpacing setTo -10
// featCall Global globalProp energyBallSize setTo 0.03

// increment the creator ID and then keep track of which creator this is for finding the energy balls later
featCall Global globalProp energyBallOwnerCount add 1

// INQ is there a better way to reference this?
exprPush {{ global.getProp('energyBallOwnerCount').value }}
propPop myCreatorId

// spawn 10 ernergyballs next to the sun
featProp Population targetPopulationSize setTo 5
featProp Population deleteAfterSpawning setTo false
featCall Population populateBySpawning EnergyBall [[
//  <initScript>

  // place ball based on X and Y passed in
  propPush global.energyBallX
  propPop x

  propPush global.energyBallY
  propPop y

  propPush global.energyBallSize
  featPropPop Physics scale

  featCall Costume setColorize 0 215 0

  exprPush {{global.getProp('energyBallY').value + global.getProp('energyBallSpacing').value}}
  propPop global.energyBallY

  // tell each ball who owns it (set locally above) [TODO]
  propPush global.energyBallOwnerCount
  propPop agent.creatorID

  propPush global.energyBallIncrement
  propPop agent.myID
  
  // Increase the energyBallCount for those associated with this specific creator
  // INQ I was unsure at first how to access the global here - it was a bit confusing
  exprPush {{global.getProp('energyBallIncrement').value + 1}}
  propPop global.energyBallIncrement

]]

# PROGRAM EVENT 

onEvent Start [[

  
]]

# PROGRAM UPDATE
  every 1 runAtStart [[
  // foodLevel goes down every n seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
  propPop agent.energyLevel

  // this code sets the color of the energy bar based on how hungry the fish is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featCall Costume setPose 0
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featCall Costume setPose 1
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featCall Costume setPose 1
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    featCall Costume setPose 2
    // featCall Movement setMovementType 'float'
    prop agent.isInert setTo true

  ]]

]]


`
    },
    {
      "id": "Algae",
      "label": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'algae.json' 0

useFeature Physics
featProp Physics scale setTo 3

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 5
prop energyLevel setMax 10
prop energyLevel setMin 0

// this shadow variable will help us know what is displayed and adapt it as needed
addProp displayEnergyLevel Number 0
prop displayEnergyLevel setMax 10
prop displayEnergyLevel setMin 0

// what size should energyBalls be scaled to?
addProp energyBallSize Number 0.2

// STUDENTS_MAY_CHANGE to make Algae lose energy faster (or slower)
addProp energyUse Number 1

// used for identifying the energy balls associated with this character
addProp myCreatorId String 'undefined'

useFeature Global

useFeature Population

# PROGRAM INIT

// INQ: This is a copy and paste from the sun with new numbers. Ideally we'll eventually have some way of using 
// features or inheritance to minimize that kind of redundancy. If you see better ways here, please let me know.
// Of course, this is more complex then a kid might even try for, but it'd still be nice to streamline for us if we can

// setup the global variables that will let us do the population spawning - see the sun or where they are first created

// TODO: Use pop and push to set these to reflect this specific current agent
// ONCE THAT IS WORKING, do an onUPDATE to update which are visible

featCall Global globalProp energyBallIncrement setTo 0

// set the x and y based on this current character instance 
exprPush {{agent.getProp('x').value - 20}} 
featPropPop Global energyBallX

exprPush {{agent.getProp('y').value - 80}} 
featPropPop Global energyBallY

// comment out so we can use the prior settings for now?
// featCall Global globalProp energyBallSpacing setTo -10
// featCall Global globalProp energyBallSize setTo 0.03

// increment the creator ID and then keep track of which creator this is for finding the energy balls later
featCall Global globalProp energyBallOwnerCount add 1

// INQ is there a better way to reference this?
exprPush {{ global.getProp('energyBallOwnerCount').value }}
propPop myCreatorId

// spawn 10 ernergyballs next to the sun
featProp Population targetPopulationSize setTo 5
featProp Population deleteAfterSpawning setTo false
featCall Population populateBySpawning EnergyBall [[
//  <initScript>

  // place ball based on X and Y passed in
  propPush global.energyBallX
  propPop x

  propPush global.energyBallY
  propPop y

  propPush global.energyBallSize
  featPropPop Physics scale

  featCall Costume setColorize 0 215 0

  exprPush {{global.getProp('energyBallY').value + global.getProp('energyBallSpacing').value}}
  propPop global.energyBallY

  // tell each ball who owns it (set locally above) [TODO]
  propPush global.energyBallOwnerCount
  propPop agent.creatorID

  propPush global.energyBallIncrement
  propPop agent.myID
  
  // Increase the energyBallCount for those associated with this specific creator
  // INQ I was unsure at first how to access the global here - it was a bit confusing
  exprPush {{global.getProp('energyBallIncrement').value + 1}}
  propPop global.energyBallIncrement

]]

# PROGRAM UPDATE
  every 1 runAtStart [[

    // decrease energy each tick, using the energyUse varable to determine how much
    ifExpr {{ agent.getProp('energyLevel').value > 0 }} [[
    exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
    propPop agent.energyLevel
    ]]

    // re-scale the algae based on its energy level
    exprPush {{ (agent.getProp('energyLevel').value / 10)* 3}}
    featPropPop agent.Physics scale

  ]]

`
    },
    {
      "id": "Sky",
      "label": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'square.json' 0
featCall Costume setColorize 53 81 92

useFeature Physics
featCall Physics setSize 800 200

prop zIndex setTo -100


`
    },
    {
      "id": "EnergyCarrier",
      "label": "EnergyCarrier",
      "scriptText": `# BLUEPRINT EnergyCarrier
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Costume
featCall Costume setCostume 'square.json' 0

useFeature Physics

// sset the size 
featProp Physics scale setTo 0.1

// setup energy properties
addProp energyLevel Number 0
prop energyLevel setMax 10
prop energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp eType String 'none'

// set it up so we know when the energyCarrier touches the sun or algae or fish
useFeature Touches
featCall Touches monitor Sun b2b
featCall Touches monitor Algae b2b
featCall Touches monitor Fish b2b

# PROGRAM UPDATE
when EnergyCarrier firstTouches Sun [[
  dbgOut 'touching sun'
  // when touch Sun, get energy, change meter color to yellow, reset type to source
  // currently, use sun to re-set so always add so we don't need an expression
  // also the sun doesn't go down, so no worries there either
  prop eType setTo 'source'
  // carrying lots of energy
  prop energyLevel setTo 10
  // set to yellow so we know that's what is being carried  
  featCall Costume setColorize 255 255 0

]]

when EnergyCarrier firstTouches Algae [[
  // when touch Fish and type producer and energy isn't 0, lose energy, change meter color to green, change type to none

  // do different things if source or empty

  ifExpr {{EnergyCarrier.getProp('eType').value == 'source'}} [[ 
  prop eType setTo 'producer'

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun, and what it does to the energy character
  prop energyLevel setTo 5
  prop Algae.energyLevel add 5
  // featProp AgentWidgets meterColor setTo 65280

  featCall Costume setColorize 0 255 0
  
  featCall Algae.Costume setGlow 1

  ]]
]]

when EnergyCarrier firstTouches Fish [[
  // when touch Algae and type sunlight and energy isn't 0, get energy, change meter color to orange, change type to producer

  // do different things if source or empty

  ifExpr {{EnergyCarrier.getProp('eType').value == 'producer'}} [[ 
  prop eType setTo 'consumer'   

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun, and what it does to the energy character
  prop energyLevel setTo 1
  prop Fish.energyLevel add 1
  // featProp AgentWidgets meterColor setTo 5475327

  featCall Costume setColorize 83 139 255

  featCall Fish.Costume setGlow 1


   ]]
]]

`
    },
    {
      "id": "Timer",
      "label": "Timer",
      "scriptText": `# BLUEPRINT Timer
      # PROGRAM DEFINE
      useFeature AgentWidgets
      prop skin setTo 'onexone.json'
      addProp time Number 0
      prop zIndex setTo 500

      featProp AgentWidgets text setTo 'Time: 0'

      # PROGRAM EVENT
      onEvent Tick [[
        prop time add 1
        exprPush {{ 'Time: ' + agent.getProp('time').value }}
        featPropPop AgentWidgets text
      ]]`
    }
  ],
  "instances": [
    {
      "id": "7",
      "label": "EB to Copy",
      "bpid": "EnergyBall",
      "initScript": `prop x setTo -400
      prop y setTo -400
      // INQ: Do we HAVE TO have a add this here just to populate?  
`
    },
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -271.64
prop y setTo -312.66`
    },
    {
      "id": "1",
      "label": "Fish1",
      "bpid": "Fish",
      "initScript": `prop x setTo -264.69
prop y setTo 103.39`
    },
    {
      "id": "2",
      "label": "Algae1",
      "bpid": "Algae",
      "initScript": `prop x setTo -173.44
prop y setTo -113.23`
    },
    {
      "id": "3",
      "label": "Algae2",
      "bpid": "Algae",
      "initScript": `prop x setTo 24.83
prop y setTo -95.11`
    },
    {
      "id": "4",
      "label": "Fish2",
      "bpid": "Fish",
      "initScript": `prop x setTo 16.35
prop y setTo 55.83`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky",
      "bpid": "Sky",
      "initScript": `prop x setTo 0
prop y setTo -300`
    }
  ]
}