{
  "id": "beeDissertation(v5)",
  "label": "Bee Dissertation",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 0,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "Bee",
      "label": "Bee",
      "scriptText": `# BLUEPRINT Bee
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'bee.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.3
      
useFeature Movement
featProp Movement useAutoOrientation setTo true

// TODO: change to c2b? requires tweaking a centerFirstTouches

useFeature Touches
featCall Touches monitor redFlower b2b
featCall Touches monitor blueFlower b2b
featCall Touches monitor yellowFlower b2b
featCall Touches monitor watermelonVeggie b2b
featCall Touches monitor squashVeggie b2b
featCall Touches monitor pumpVeggie b2b

featCall Touches monitor Hive b2b

addProp nectarAmount Number 0
prop nectarAmount setMax 100
prop nectarAmount setMin 0

// this tracks the hive the bee belongs to. If it is 0, we assume kids control the bee and it can go anywhere. 
// if it is a number, we assume code created the bee, and it will only go to its home hive 
addProp hiveID Number 0

addProp pollinateRed Boolean false
addProp pollinateYellow Boolean false
addProp pollinateBlue Boolean false
addProp pollinateSquash Boolean false
addProp pollinateWater Boolean false
addProp pollinatePump Boolean false

addProp hiveX Number 0
addProp hiveY Number 0

addProp redID Number 0
prop redID setTo 0
addProp blueID Number 0
prop blueID setTo 0
addProp yellowID Number 0
prop yellowID setTo 0
addProp squashID Number 0
prop squashID setTo 0
addProp waterID Number 0
prop waterID setTo 0
addProp pumpID Number 0
prop pumpID setTo 0

useFeature AgentWidgets
// featProp AgentWidgets text setTo 'Bee'
featCall AgentWidgets bindMeterTo nectarAmount

useFeature Population

addProp beeID Number 1

// mode to determine what AI bees do
// if the mode is set to user, which is the default, assume the AI shouldn't do anything because it is controlled
// via pozyx or ptrack. so we need to set the mode to something else if spawned by a hive
// all modes
  // user: controlled by a user, so no AI 
  // forage: get the nectar it knows about
  // scout: look for a new flower
  // dance: dance so other bees know about nectar
  // watch: watch for dance, then likely switch to forwage or scout 

addProp mode String 'user'

# PROGRAM EVENT 

  onEvent Tick [[
      // if this is AI and set to start, start moving
      ifExpr {{ agent.getProp('mode').value == 'start' }} [[ 
       
        // TODO: Make the random more consistently random
        // set it up to change later so the bounce isn't too redundant
        // change boundaries

        prop mode setTo 'scout'
        featCall Movement setMovementType 'edgeToEdge' 2 0 180
        featCall Movement setRandomDirection
        exprPush {{ 'Bee ' + (Bee.getProp('beeID').value - 1) }}
        featPropPop AgentWidgets text
      ]]
    ]]

# PROGRAM UPDATE
//HIVE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
when Bee touches Hive [[
  every 1 runAtStart [[
    ifExpr {{ Bee.getProp('nectarAmount').value > 0}} [[
      featCall Bee.Costume setGlow 2
      prop Bee.nectarAmount sub 5
      prop Hive.nectarAmount add 5 
    ]] 
  ]]
]]


//YELLOW FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches yellowFlower [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop yellowFlower.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches yellowFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateYellow setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ yellowFlower.getProp('generation').value == 1 }} [[
    exprPush {{ yellowFlower.getProp('flowerID').value }}
    propPop yellowID
  ]]
]]

//pollination when new flower of same color is visited
  when Bee firstTouches yellowFlower [[
    ifExpr {{ Bee.getProp('pollinateYellow').value == true }} [[ //bee has visited color before
      ifExpr {{ yellowFlower.getProp('generation').value == 1 && Bee.getProp('yellowID').value != yellowFlower.getProp('flowerID').value }} [[ 
        featCall Population createAgent yellowFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
]]


//BLUE FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches blueFlower [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop blueFlower.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches blueFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateBlue setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ blueFlower.getProp('generation').value == 1 }} [[
    exprPush {{ blueFlower.getProp('flowerID').value }}
    propPop blueID
  ]]

]]

//pollination when new flower of same color is visited
  when Bee firstTouches blueFlower [[
    ifExpr {{ Bee.getProp('pollinateBlue').value == true }} [[ 
      ifExpr {{ blueFlower.getProp('generation').value == 1 &&  Bee.getProp('blueID').value != blueFlower.getProp('flowerID').value }} [[ 
        featCall Population createAgent blueFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
]]

//RED FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches redFlower [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop redFlower.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches redFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateRed setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ redFlower.getProp('generation').value == 1 }} [[
    exprPush {{ redFlower.getProp('flowerID').value }}
    propPop redID
  ]]
]]

//pollination when new flower of same color is visited
when Bee firstTouches redFlower [[
  ifExpr {{ Bee.getProp('pollinateRed').value == true }} [[ //bee has visited color before
    ifExpr {{ redFlower.getProp('generation').value == 1 && Bee.getProp('redID').value != redFlower.getProp('flowerID').value }} [[ 
      featCall Population createAgent redFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateRed').value == false }} [[ ]]
]]

//PUMPKIN VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches pumpVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
    prop Bee.nectarAmount add 5
    prop pumpVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches pumpVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinatePump setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ pumpVeggie.getProp('generation').value == 1 }} [[
    exprPush {{ pumpVeggie.getProp('flowerID').value }}
    propPop pumpID
  ]]
]]

//pollination when new flower of same color is visited
when Bee firstTouches pumpVeggie [[
  ifExpr {{ Bee.getProp('pollinatePump').value == true }} [[ //bee has visited color before
    dbgOut 'here with pumpID: ' {{  Bee.getProp('pumpID').value }} ' and flowerID ' {{ pumpVeggie.getProp('flowerID').value }}
    ifExpr {{ pumpVeggie.getProp('generation').value == 1 && Bee.getProp('pumpID').value != pumpVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent pumpVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateSquash').value == false }} [[ ]]
]]


//WATERMELON VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches watermelonVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop watermelonVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches watermelonVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinateWater setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ watermelonVeggie.getProp('generation').value == 1 }} [[
    exprPush {{ watermelonVeggie.getProp('flowerID').value }}
    propPop waterID
  ]]
]]

//pollination when new flower of same color is visited
when Bee firstTouches watermelonVeggie [[
  ifExpr {{ Bee.getProp('pollinateWater').value == true }} [[ //bee has visited color before
    ifExpr {{ watermelonVeggie.getProp('generation').value == 1 && Bee.getProp('waterID').value != watermelonVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent watermelonVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateSquash').value == false }} [[ ]]
]]

//SQUASH VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee touches squashVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop squashVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee lastTouches squashVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinateSquash setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ squashVeggie.getProp('generation').value == 1 }} [[ 
    exprPush {{ squashVeggie.getProp('flowerID').value }}
    propPop squashID
  ]]
]]

//pollination when new flower of same color is visited
when Bee firstTouches squashVeggie [[
  ifExpr {{ Bee.getProp('pollinateSquash').value == true }} [[ //bee has visited color before
    ifExpr {{ squashVeggie.getProp('generation').value == 1 && Bee.getProp('squashID').value != squashVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent squashVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
]]
`
    },
    {
      "id": "Hive",
      "label": "Hive",
      "scriptText": `# BLUEPRINT Hive
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'hive.png'

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

// track hiveID in case we have more than one
addProp hiveID Number 0

// number of AI bees to generate on runAtStart
addProp aiBeeCount Number 0
// set it separately so it'll appear in map editor - remove if that feature
prop aiBeeCount setTo 0

useFeature Population

// set the id to the current count of agents so that it keeps incrementing 
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Hive') + 1 }} 
propPop hiveID

addProp nectarAmount Number 0
prop nectarAmount setMax 100
prop nectarAmount setMin 0

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Hive'
featCall AgentWidgets bindMeterTo nectarAmount

useFeature Global

// setup a global variable so we can pass info into the creation of bees, but only do it once
ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'hiveIDPassing') == undefined }} [[
  featCall Global addGlobalProp hiveIDPassing Number 1
]]

# PROGRAM UPDATE
every 0.1 runAtStart [[

  // Create ai bees if the count is > 0
  // NOTE: checking we have only 1 as a hack to avoid the bug that leads the start event to fire 3 times
  ifExpr {{ agent.getProp('aiBeeCount').value >  agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Bee') }} [[ 

  // send this hiveID to the global variable so we can grab it inside of createAgent  
  exprPush {{ agent.getProp('hiveID').value }}
  propPop global.hiveIDPassing

  featCall Population createAgent Bee [[
        
      // grab the hiveID we passed in, and set it to this bee's hiveID so we can check stuff later
      exprPush {{global.getProp('hiveIDPassing').value}}
      propPop hiveID  

      // give it the next available ID, in order 
      exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Bee') + 1 }}         propPop beeID
        
      // set to start mode so it'll switch to scouting (this is because a start event isn't called)
      prop mode setTo 'start'

      // set the hiveX and hiveY so we can go back to it later
      // though we may need to update it in case the hive is move
      exprPush {{ agent.x }}
      propPop hiveX
      exprPush {{ agent.y }}
      propPop hiveY
    ]]
  ]]
]]

`
    },
    {
      "id": "redFlower",
      "label": "redFlower",
      "scriptText": `# BLUEPRINT redFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'redFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'redFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Red Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "blueFlower",
      "label": "blueFlower",
      "scriptText": `# BLUEPRINT blueFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'blueFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'blueFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Blue Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT


`
    },
    {
      "id": "yellowFlower",
      "label": "yellowFlower",
      "scriptText": `# BLUEPRINT yellowFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'yellowFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'yellowFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Yellow Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "squashVeggie",
      "label": "squashVeggie",
      "scriptText": `# BLUEPRINT squashVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'squashVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'squashVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Squash'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "pumpVeggie",
      "label": "pumpVeggie",
      "scriptText": `# BLUEPRINT pumpVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'pumpkinVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'pumpVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Pumpkin'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "watermelonVeggie",
      "label": "watermelonVeggie",
      "scriptText": `# BLUEPRINT watermelonVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'watermelonVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee b2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'watermelonVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Watermelon'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "background",
      "label": "background",
      "scriptText": `# BLUEPRINT background
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'background (filter).png' 0
featCall Costume setScale 1
// useFeature Movement
# PROGRAM EVENT

# PROGRAM UPDATE
// when xxx touches yyy [[ ]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "background0",
      "bpid": "background",
      "initScript": `prop x setTo -1.42
prop y setTo 1.95
prop scale setTo 0.8`
    },
    {
      "id": "1",
      "label": "blueFlower1",
      "bpid": "blueFlower",
      "initScript": `prop x setTo -265.80
prop y setTo -111.06`
    },
    {
      "id": "2",
      "label": "yellowFlower2",
      "bpid": "yellowFlower",
      "initScript": `prop x setTo -127.61
prop y setTo 324.61`
    },
    {
      "id": "3",
      "label": "blueFlower3",
      "bpid": "blueFlower",
      "initScript": `prop x setTo -307.43
prop y setTo 54.86`
    },
    {
      "id": "4",
      "label": "redFlower4",
      "bpid": "redFlower",
      "initScript": `prop x setTo 304.08
prop y setTo -10.05`
    },
    {
      "id": "6",
      "label": "Hive",
      "bpid": "Hive",
      "initScript": `prop x setTo 238.51
prop y setTo -216.81
prop aiBeeCount setTo 5`
    },
    {
      "id": "7",
      "label": "pumpVeggie7",
      "bpid": "pumpVeggie",
      "initScript": `prop x setTo 76.58
prop y setTo 301.32`
    },
    {
      "id": "8",
      "label": "watermelonVeggie8",
      "bpid": "watermelonVeggie",
      "initScript": `prop x setTo 170.77
prop y setTo 104.67`
    },
    {
      "id": "9",
      "label": "squashVeggie9",
      "bpid": "squashVeggie",
      "initScript": `prop x setTo -35.24
prop y setTo 123.20`
    },
    {
      "id": "10",
      "label": "pumpVeggie10",
      "bpid": "pumpVeggie",
      "initScript": `prop x setTo 324.65
prop y setTo 294.78`
    }
  ]
}