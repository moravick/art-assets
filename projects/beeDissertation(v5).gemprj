{
  "id": "beeDissertation(v5)",
  "label": "Bee Dissertation",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 0,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "Bee",
      "label": "Bee",
      "scriptText": `# BLUEPRINT Bee
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'bee.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.3

useFeature Movement
featProp Movement useAutoOrientation setTo true

// TODO: visualy indicate nectar quality in some way?

useFeature Touches
featCall Touches monitor redFlower c2b
featCall Touches monitor blueFlower c2b
featCall Touches monitor yellowFlower c2b
featCall Touches monitor watermelonVeggie c2b
featCall Touches monitor squashVeggie c2b
featCall Touches monitor pumpVeggie c2b

featCall Touches monitor Hive c2b

addProp nectarAmount Number 0
prop nectarAmount setMax 20
prop nectarAmount setMin 0

// this tracks the hive the bee belongs to. If it is 0, we assume kids control the bee and it can go anywhere. 
// if it is a number, we assume code created the bee, and it will only go to its home hive 
addProp hiveID Number 0

addProp pollinateRed Boolean false
addProp pollinateYellow Boolean false
addProp pollinateBlue Boolean false
addProp pollinateSquash Boolean false
addProp pollinateWater Boolean false
addProp pollinatePump Boolean false

addProp hiveX Number 0
addProp hiveY Number 0

addProp redID Number 0
prop redID setTo 0
addProp blueID Number 0
prop blueID setTo 0
addProp yellowID Number 0
prop yellowID setTo 0
addProp squashID Number 0
prop squashID setTo 0
addProp waterID Number 0
prop waterID setTo 0
addProp pumpID Number 0
prop pumpID setTo 0

useFeature AgentWidgets
// featProp AgentWidgets text setTo 'Bee'
featCall AgentWidgets bindMeterTo nectarAmount

useFeature Population

addProp beeID Number 1

// setup some variables to remember a flower we visited and its location
addProp visitedX Number 0
addProp visitedY Number 0
addProp visitedQuality Number 0
addProp visitedAmount Number 0

// to keep track of how long we've been dancing if in fancing mode
addProp dancingCounter Number 0
addProp watchingCounter Number 0


// mode to determine what AI bees do
// if the mode is set to user, which is the default, assume the AI shouldn't do anything because it is controlled
// via pozyx or ptrack. so we need to set the mode to something else if spawned by a hive
// all modes
  // user: controlled by a user, so no AI 
  // user-dancing: controlled by user, but hanging in the hive
  // forage: get the nectar it knows about
  // scouting: look for a new flower
  // danceing: dance so other bees know about nectar
  // watching: watch for dance, then likely switch to forwage or scout 
  // collecting: while grabbing the nectar at a flower
  // returning: we should head back to the hive

  addProp mode String 'user'

  // give it the next available ID, in order 
  exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Bee') + 1 }}         
  propPop beeID

  ifExpr {{ agent.getProp('mode').value != 'user'}} [[
    exprPush {{ 'Bee ' + (agent.getProp('beeID').value) }}
    featPropPop AgentWidgets text
    ]]

# PROGRAM EVENT 

  onEvent Tick [[
      // if this is AI and set to start, start moving
      ifExpr {{ agent.getProp('mode').value == 'start' }} [[  
       
        // TODO: 
        // change boundaries to work ??
        // make the edgeToEdge speed a property 
        // change random direction if the bee returns to the hive empty handed as an AI
        
        prop mode setTo 'scouting'
        featCall Movement setMovementType 'edgeToEdge' 5 0 180
        featCall Movement setRandomDirection

      ]]
    ]]

# PROGRAM UPDATE
//HIVE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

when Bee centerFirstTouches Hive [[
  ifExpr {{ Bee.getProp('mode').value == 'scouting' }} [[ 
    // if we foudn our way back here and haven't found anyhting, pick a new random direction to find something useful maybe 
    featCall Movement setRandomDirection
  ]]

  ifExpr {{ Bee.getProp('mode').value != 'user' }} [[
    prop visible setTo false
  ]]

]]

when Bee centerLastTouches Hive [[
  prop visible setTo true

  // clear out any visited flower memory
  // TODO, do we need to not do this if it is foraging?
  prop visitedX setTo 0
  prop visitedY setTo 0
  prop visitedAmount setTo 0
  prop visitedQuality setTo 0

  // if the user was also dancing, have them stop when they leave
  ifExpr {{Bee.getProp('mode').value == 'user-dancing'}} [[
      prop mode setTo 'user'
      prop Hive.dancingBeesCounter sub 1
    ]]
]]

when Bee centerTouches Hive [[
  every 1 runAtStart [[
    ifExpr {{ Bee.getProp('nectarAmount').value > 0}} [[
      featCall Bee.Costume setGlow 2
      prop Bee.nectarAmount sub 5
      prop Hive.nectarAmount add 5 
    ]] 
      
    // if it's the user, and they have decent nectar, have them dance too
    ifExpr {{Bee.getProp('mode').value == 'user'}} [[
      ifExpr {{ Bee.getProp('visitedAmount').value >= 40 && Bee.getProp('visitedQuality').value >= 3}} [[
        prop mode setTo 'user-dancing'
        prop Hive.dancingBeesCounter add 1
      ]]
    ]]

    ifExpr {{ Bee.getProp('mode').value == 'returning' }} [[ 

        featCall Movement setMovementType 'static'

        // if we are done depositing nectar figure out what's next
        ifExpr {{ Bee.getProp('nectarAmount').value == 0 }} [[

          // if it was a good flower with decent nectar that we visited
          ifExpr {{ Bee.getProp('visitedQuality').value >= 3}} [[
           
            // if it was enough nectar for others, dance 
            ifExpr {{ Bee.getProp('visitedAmount').value >= 40 }} [[
              prop mode setTo 'dancing'
              prop Hive.dancingBeesCounter add 1

              // start the dancingCounter 
              prop dancingCounter setTo 5
              
            ]]
            // if it was just enough for me
             ifExpr {{ Bee.getProp('visitedAmount').value <= 40 }} [[
               prop mode setTo 'foraging'
               // note, handle foraging below to avoid redundancy

            ]]
            //nectarQuality >= 3

            // there was low quality nectar or just not that much, look for a new dance
            ifExpr {{ Bee.getProp('visitedAmount').value < 20 ||  Bee.getProp('visitedQuality').value < 3 }} [[
              prop mode setTo 'watching'
              prop watchingCounter setTo 5
          ]]
          // not worth dancing, so watch
        ]] 
        // visited quality >= 3
      ]]
      // bee out of nectar
    ]]
    // --- returning

    ifExpr {{ Bee.getProp('mode').value == 'dancing' }} [[

        prop dancingCounter sub 1
        
        ifExpr {{ Bee.getProp('dancingCounter').value == 0 }} [[

          prop Hive.dancingBeesCounter sub 1

          prop mode setTo 'foraging'
          // note, handle foraging below to avoid redundancy
        ]]
    ]] 
    // --- dancing

    ifExpr {{ Bee.getProp('mode').value == 'watching' }} [[ 

        dbgOut 'inside watching'

        // set to 0 so we can check if they got changed 
        prop global.flowerXPassing setTo 0
        prop global.flowerYPassing setTo 0

        featCall Population agentsForEach Bee [[

          ifExpr {{Bee.getProp('mode').value == 'dancing' || Bee.getProp('mode').value == 'user-dancing'}} [[
              exprPush {{ Bee.getProp('visitedX').value }}
              propPop global.flowerXPassing

              exprPush {{ Bee.getProp('visitedY').value }}
              propPop global.flowerYPassing
          ]]
          
          // if someone was dancing, have our watcher go there, if not keep watching in case someone appears
          ifExpr {{ global.flowerXPassing != 0 }} [[

            exprPush {{ global.getProp('flowerXPassing').value }}
            propPop targetX
            exprPush {{ global.getProp('flowerYPassing').value }}
            propPop targetY
            prop mode setTo 'foraging'
          ]]
        ]]


        ifExpr {{ agent.getProp('watchingCounter').value == 0 }} [[
          // use start because it will switch to scout on the tick and keep that code all in one spot
          prop mode setTo 'start'
        ]]

        // we hit 0 on watching, so just go scout
        prop watchingCounter sub 1
    ]] 
    // --- watching

    // do this last so we can set it above and then handle it here 
    ifExpr {{ Bee.getProp('mode').value == 'foraging' }} [[

      // setTarget and head to it
              
      // set the x and y of the hive, then go there
      exprPush {{Bee.getProp('visitedX').value}}
      featPropPop Movement targetX

      exprPush {{Bee.getProp('visitedY').value}}
      featPropPop Movement targetY
    
      featCall Movement setMovementType 'goLocation' 3
    ]]

  ]]
  // every 1
]]


//YELLOW FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches yellowFlower [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop yellowFlower.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches yellowFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateYellow setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ yellowFlower.getProp('generation').value == 1 }} [[
    exprPush {{ yellowFlower.getProp('flowerID').value }}
    propPop yellowID
  ]]
]]

//pollination when new flower of same color is visited
  when Bee centerFirstTouches yellowFlower [[
    ifExpr {{ Bee.getProp('pollinateYellow').value == true }} [[ //bee has visited color before
      ifExpr {{ yellowFlower.getProp('generation').value == 1 && Bee.getProp('yellowID').value != yellowFlower.getProp('flowerID').value }} [[ 
        featCall Population createAgent yellowFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
]]


//BLUE FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches blueFlower [[
  every 1 runAtStart [[

   // only grab nectar if you aren't full and there is some! 
   ifExpr {{ Bee.getProp('nectarAmount').value < 20 }} [[
      ifExpr {{ blueFlower.getProp('nectarAmount').value > 5 }} [[ 
        featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop blueFlower.nectarAmount sub 5
     

        // if the nectar is low, we are collecting, and we aren't full, scout some more 
        ifExpr {{  Bee.getProp('mode').value == 'collecting' }} [[
          ifExpr {{  blueFlower.getProp('nectarAmount').value < 5 }} [[
            prop mode setTo 'scouting'
          ]]
        ]]
      ]]
    ]]



    //TODO: add a queueTarget call and hop over to the middle of the flower?

    // TODO: 
      // note that this means we can't change the max with changing the 20 here .. would be nice to check
      // add code to keep searching if not full and this is empty

    // if you are AI and collecting  or the flower is out 
    ifExpr {{ Bee.getProp('mode').value == 'collecting' }} [[ 
      // and you max out on nectar, or the flowe is basically out, switch to heading back
      ifExpr {{ Bee.getProp('nectarAmount').value == 20 }} [[
        prop mode setTo 'returning'

        // set the x and y of the hive, then go there
        exprPush {{Bee.getProp('hiveX').value}}
        featPropPop Movement targetX

        exprPush {{Bee.getProp('hiveY').value}}
        featPropPop Movement targetY
       
        featCall Movement setMovementType 'goLocation' 3
      ]]
    ]]
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches blueFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateBlue setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ blueFlower.getProp('generation').value == 1 }} [[
    exprPush {{ blueFlower.getProp('flowerID').value }}
    propPop blueID
  ]]

]]

//pollination when new flower of same color is visited
  when Bee centerFirstTouches blueFlower [[

    // if you are AI, found a flower, so pause to get the nectar if it has quality  of medium or higher (3-5)
    ifExpr {{ Bee.getProp('mode').value == 'scouting' || Bee.getProp('mode').value == 'foraging' ||  Bee.getProp('mode').value == 'user' }} [[ 
      ifExpr {{ blueFlower.getProp('nectarQuality').value >= 3}} [[

        // we are using user above for the values below, so this makes sure we only change non-user bees' mode
        ifExpr {{ Bee.getProp('mode').value != 'user'}} [[
          featCall Movement setMovementType 'static'
          prop mode setTo 'collecting'
        ]]
        
        // remember this location and other info so we can dance and / or come back later 
        // we only remember the last one, but assume we wouldn't move on if we didn't need it
        exprPush {{ blueFlower.getProp('x').value }}
        propPop visitedX 
        exprPush {{ blueFlower.getProp('y').value }}
        propPop visitedY
        exprPush {{blueFlower.getProp('nectarQuality').value }}
        propPop visitedQuality
        exprPush {{blueFlower.getProp('nectarAmount').value }}
        propPop visitedAmount

      ]]
    ]]

    // grab some pollen whether you stop or not, since you checked it out ... 
    ifExpr {{ Bee.getProp('pollinateBlue').value == true }} [[ 
      ifExpr {{ blueFlower.getProp('generation').value == 1 &&  Bee.getProp('blueID').value != blueFlower.getProp('flowerID').value }} [[ 
        featCall Population createAgent blueFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
]]

//RED FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches redFlower [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop redFlower.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches redFlower [[
  featCall Bee.Costume setGlow 0
  prop pollinateRed setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ redFlower.getProp('generation').value == 1 }} [[
    exprPush {{ redFlower.getProp('flowerID').value }}
    propPop redID
  ]]
]]

//pollination when new flower of same color is visited
when Bee centerFirstTouches redFlower [[
  ifExpr {{ Bee.getProp('pollinateRed').value == true }} [[ //bee has visited color before
    ifExpr {{ redFlower.getProp('generation').value == 1 && Bee.getProp('redID').value != redFlower.getProp('flowerID').value }} [[ 
      featCall Population createAgent redFlower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateRed').value == false }} [[ ]]
]]

//PUMPKIN VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches pumpVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
    prop Bee.nectarAmount add 5
    prop pumpVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches pumpVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinatePump setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ pumpVeggie.getProp('generation').value == 1 }} [[
    exprPush {{ pumpVeggie.getProp('flowerID').value }}
    propPop pumpID
  ]]
]]

//pollination when new flower of same color is visited
when Bee centerFirstTouches pumpVeggie [[
  ifExpr {{ Bee.getProp('pollinatePump').value == true }} [[ //bee has visited color before
    ifExpr {{ pumpVeggie.getProp('generation').value == 1 && Bee.getProp('pumpID').value != pumpVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent pumpVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25 
        prop generation setTo 2
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateSquash').value == false }} [[ ]]
]]


//WATERMELON VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches watermelonVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop watermelonVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches watermelonVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinateWater setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ watermelonVeggie.getProp('generation').value == 1 }} [[
    exprPush {{ watermelonVeggie.getProp('flowerID').value }}
    propPop waterID
  ]]
]]

//pollination when new flower of same color is visited
when Bee centerFirstTouches watermelonVeggie [[
  ifExpr {{ Bee.getProp('pollinateWater').value == true }} [[ //bee has visited color before
    ifExpr {{ watermelonVeggie.getProp('generation').value == 1 && Bee.getProp('waterID').value != watermelonVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent watermelonVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
  //ifExpr {{ Bee.getProp('pollinateSquash').value == false }} [[ ]]
]]

//SQUASH VEGGIE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches squashVeggie [[
  every 1 runAtStart [[
    featCall Bee.Costume setGlow 2
        prop Bee.nectarAmount add 5
        prop squashVeggie.nectarAmount sub 5
  ]]
]]

//setting pollination-related properties for next flower
when Bee centerLastTouches squashVeggie [[
  featCall Bee.Costume setGlow 0
  prop pollinateSquash setTo true

  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ squashVeggie.getProp('generation').value == 1 }} [[ 
    exprPush {{ squashVeggie.getProp('flowerID').value }}
    propPop squashID
  ]]
]]

//pollination when new flower of same color is visited
when Bee centerFirstTouches squashVeggie [[
  ifExpr {{ Bee.getProp('pollinateSquash').value == true }} [[ //bee has visited color before
    ifExpr {{ squashVeggie.getProp('generation').value == 1 && Bee.getProp('squashID').value != squashVeggie.getProp('flowerID').value }} [[ 
      featCall Population createAgent squashVeggie [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Physics scale setTo 0.25
        prop generation setTo 2 
      ]] 
    ]] 
  ]]
]]
`
    },
    {
      "id": "Hive",
      "label": "Hive",
      "scriptText": `# BLUEPRINT Hive
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'hive.png'

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

// track hiveID in case we have more than one
addProp hiveID Number 0

// number of AI bees to generate on runAtStart
addProp aiBeeCount Number 0
// set it separately so it'll appear in map editor - remove if that feature
prop aiBeeCount setTo 0

useFeature Population

// set the id to the current count of agents so that it keeps incrementing 
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Hive') + 1 }} 
propPop hiveID

// keep track of how many bees are dancing
addProp dancingBeesCounter Number 0

addProp nectarAmount Number 0
prop nectarAmount setMax 100
prop nectarAmount setMin 0

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

useFeature AgentWidgets
exprPush {{'Hive [D:' + agent.getProp('dancingBeesCounter').value + ']'}}
featPropPop AgentWidgets text 
featCall AgentWidgets bindMeterTo nectarAmount

useFeature Global

// setup a global variable so we can pass info into the creation of bees, but only do it once
ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'hiveIDPassing') == undefined }} [[
  featCall Global addGlobalProp hiveIDPassing Number 1

  // use this global in the bee dance watching
  featCall Global addGlobalProp flowerXPassing Number 0
  featCall Global addGlobalProp flowerYPassing Number 0
]]

# PROGRAM UPDATE

every 1 runAtStart [[
  // update our name to reflect the number of dancing bees
  exprPush {{'Hive [D:' + agent.getProp('dancingBeesCounter').value + ']'}}
  featPropPop AgentWidgets text 
]]

every 0.5 runAtStart [[

  // Create ai bees if the count is > 0
  // NOTE: checking we have only 1 as a hack to avoid the bug that leads the start event to fire 3 times
  ifExpr {{ agent.getProp('aiBeeCount').value >  agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Bee') }} [[ 

  // send this hiveID to the global variable so we can grab it inside of createAgent  
  exprPush {{ agent.getProp('hiveID').value }}
  propPop global.hiveIDPassing

  featCall Population createAgent Bee [[
        
      // grab the hiveID we passed in, and set it to this bee's hiveID so we can check stuff later
      exprPush {{global.getProp('hiveIDPassing').value}}
      propPop hiveID  

      // set the hiveX and hiveY so we can go back to it later
      // though we may need to update it in case the hive is move
      exprPush {{ agent.x }}
      propPop hiveX
      exprPush {{ agent.y }}
      propPop hiveY

      // set to start mode so it'll switch to scouting (this is because a start event isn't called)
      prop mode setTo 'start'
    ]]
  ]]
]]

`
    },
    {
      "id": "redFlower",
      "label": "redFlower",
      "scriptText": `# BLUEPRINT redFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'redFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'redFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Red Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "blueFlower",
      "label": "blueFlower",
      "scriptText": `# BLUEPRINT blueFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'blueFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'blueFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Blue Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT


`
    },
    {
      "id": "yellowFlower",
      "label": "yellowFlower",
      "scriptText": `# BLUEPRINT yellowFlower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'yellowFlower.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'yellowFlower') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Yellow Flower'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "squashVeggie",
      "label": "squashVeggie",
      "scriptText": `# BLUEPRINT squashVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'squashVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'squashVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Squash'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "pumpVeggie",
      "label": "pumpVeggie",
      "scriptText": `# BLUEPRINT pumpVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'pumpkinVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'pumpVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Pumpkin'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "watermelonVeggie",
      "label": "watermelonVeggie",
      "scriptText": `# BLUEPRINT watermelonVeggie
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'watermelonVeggie.png' 

useFeature Physics
featCall Physics init
featProp Physics scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount Number 100 
prop nectarAmount setMax 100
prop nectarAmount setMin 0 

addProp nectarQuality Number 3
prop nectarQuality setMax 5
prop nectarQuality setMin 1

addProp generation Number 1

useFeature Population

addProp flowerID Number 0

// set the id to the current count of agents so that it keeps incrementing
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'watermelonVeggie') + 1 }}
propPop flowerID

useFeature AgentWidgets
featProp AgentWidgets text setTo 'Watermelon'
featCall AgentWidgets bindMeterTo nectarAmount

# PROGRAM INIT
`
    },
    {
      "id": "background",
      "label": "background",
      "scriptText": `# BLUEPRINT background
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'background (filter).png' 0
featCall Costume setScale 1
// useFeature Movement
# PROGRAM EVENT

# PROGRAM UPDATE
`
    },
    {
      "id": "Timer",
      "label": "Timer",
      "scriptText": `# BLUEPRINT Timer
# PROGRAM DEFINE
useFeature AgentWidgets
useFeature Costume
featCall Costume setCostume 'onexone.json' 0
addProp time Number 0

featProp AgentWidgets text setTo 'Time: 0'

# PROGRAM INIT

prop x setTo 445
prop y setTo -256

      # PROGRAM UPDATE
  every 1 runAtStart [[
  prop time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop AgentWidgets text
]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "background0",
      "bpid": "background",
      "initScript": `prop x setTo -1.42
prop y setTo 1.95
prop scale setTo 0.8`
    },
    {
      "id": "1",
      "label": "blueFlower1",
      "bpid": "blueFlower",
      "initScript": `prop x setTo 0.66
prop y setTo -177.59`
    },
    {
      "id": "3",
      "label": "blueFlower3",
      "bpid": "blueFlower",
      "initScript": `prop x setTo 296.62
prop y setTo 3.18`
    },
    {
      "id": "6",
      "label": "Hive",
      "bpid": "Hive",
      "initScript": `prop x setTo 238.51
prop y setTo -216.81
prop aiBeeCount setTo 5`
    },
    {
      "id": "7",
      "label": "blueFlower7",
      "bpid": "blueFlower",
      "initScript": `prop x setTo 192.55
prop y setTo 271.17`
    },
    {
      "id": "8",
      "label": "blueFlower8",
      "bpid": "blueFlower",
      "initScript": `prop x setTo 68.36
prop y setTo -12.61
prop nectarQuality setTo 3`
    },
    {
      "id": "9",
      "label": "blueFlower9",
      "bpid": "blueFlower",
      "initScript": `prop x setTo -177.59
prop y setTo -52.10`
    },
    {
      "id": "1809",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 349.21
prop y setTo -391.19`
    }
  ]
}