{
  "id": "Moths-Activity-Dont-Know",
  "label": "Moths Activity Dont Know",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 4474111,
    "roundsCanLoop": true
  },
  "rounds": [
    {
      "id": "r1",
      "label": "Hiding Round",
      "time": 60,
      "intro": "You are a moth trying to hide from predators. You also need to eat. Good luck!",
      "initScript": `\n        
        // randomly assign moths to be dark or light
        featCall Population agentsForEach Moth [[

          // set this back to outline mode so we are not sure what we are
          featCall Costume setCostume 'moth_outline.png' 0

          // re-set the energy
          prop energy setTo 50
        
          prop rndForColor setToRnd 1 10
          ifExpr {{  agent.getProp('rndForColor').value  < 5 }} [[ 
              prop lightOrDark setTo 'light'
          ]]
          [[
              prop lightOrDark setTo 'dark'
          ]]
        ]]
      `,
      "outtro": "We are now showing the moth colors. What do you notice about which ones lived?",
      "endScript": `

        featCall Population agentsForEach Moth [[
          // if the moth is still alive 
          ifExpr {{agent.getProp('causeOfDeath').value == 'alive' }} [[ 

            // then show it's color 
            ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
              featCall agent.Costume setCostume 'moth_dark.png' 0
            ]]
            ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
              featCall agent.Costume setCostume 'moth_light.png' 0
            ]]

            // stop moving 
            prop agent.isInert setTo true 
          ]]
        ]]
      `
    }
  ],
  "blueprints": [
    {
      "id": "Moth",
      "label": "Moth",
      "scriptText": `# BLUEPRINT Moth
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume

featCall Costume setCostume 'moth_outline.png' 0

useFeature Physics
featProp Physics scale setTo 0.05

useFeature Movement
featProp Movement useAutoOrientation setTo true

useFeature Touches
featCall Touches monitor TreeBranch c2b
featCall Touches monitor Fruit c2b

useFeature AgentWidgets
useFeature Population

addProp mothID Number 0
// set the id to the current count of agents so that it keeps incrementing 
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'Moth') + 1 }} 
propPop mothID

exprPush {{ 'Moth ' + (agent.getProp('mothID').value) }}
featPropPop AgentWidgets text

// this is how much energy the moths have / start with. I picked 50 so that a moth sitting in the middle of nowhere will die of starvation
// if it doesnt move at least once during the round
addProp energy Number 50
prop energy setMax 50
prop energy setMin 0

featCall AgentWidgets bindMeterTo energy

// is this a dark or light moth / tree?  This is set in the round code
addProp lightOrDark String 'dark'
// camoflaged is set automatically when a moth goes onto a branch
addProp camouflaged Boolean false
// this sets automatically to false when going onto a branch, and true when moving off 
addProp flying Boolean true
// we use this to pick which image to use to indicate the moth is dead. alive is used to determine that it didn't actually die ... 
addProp causeOfDeath String 'alive' // or starved, or ripped

// property to help with setting the moth randomly since we can't delcare a temp variable
addProp rndForColor Number 0

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

when Moth centerFirstTouches TreeBranch [[
  // if the tree branch and the moth are the same color, it is now hidden 
  prop flying setTo false
  ifExpr {{ Moth.getProp('lightOrDark').value ==  TreeBranch.getProp('lightOrDark').value}} [[
    prop camouflaged setTo true
  ]]
  // if not, make sure it is not camouflaged
  ifExpr {{ Moth.getProp('lightOrDark').value !=  TreeBranch.getProp('lightOrDark').value}} [[
    prop camouflaged setTo false
  ]]
]]

when Moth centerLastTouches TreeBranch [[
  prop camouflaged setTo false
  prop flying setTo true
]]

when Moth centerTouches Fruit [[
  every 1 runAtStart [[
    ifExpr {{ Fruit.getProp('energy').value >= 2 }} [[ 
      prop Moth.energy add 2
      prop Fruit.energy sub 2
    ]]

    ifExpr {{ Fruit.getProp('energy').value == 0 }} [[
      featCall Fruit.Costume setCostume 'moth_fruit_eaten.png' 0
    ]] 
  ]]

]]


  every 1 runAtStart [[
    prop energy sub 1

    // if you hit 0 energy and are still alive ... 
    ifExpr {{Moth.getProp('energy').value == 0 && Moth.getProp('causeOfDeath').value == 'alive'}} [['
      ifExpr {{ Moth.getProp('lightOrDark').value == 'dark' }} [[
        featCall Moth.Costume setCostume 'moth_starved_dark.png' 0
      ]]
      ifExpr {{ Moth.getProp('lightOrDark').value == 'light' }} [[
        featCall Moth.Costume setCostume 'moth_starved_light.png' 0
      ]]
      // TODO: change skin to be dead from energy
      prop Moth.causeOfDeath setTo 'starved'
      prop Moth.energy setTo 0
      prop Moth.isInert setTo true
    ]]
    // TODO check if we are dead 
  ]]

# PROGRAM UPDATE
`
    },
    {
      "id": "TreeBranch",
      "label": "TreeBranch",
      "scriptText": `# BLUEPRINT TreeBranch
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'tree_1_medium.png' 0

// note that this is updated in round
addProp lightOrDark String 'dark'

useFeature Movement
useFeature Physics

featProp Physics scale setTo 0.3

useFeature Population

addProp treeID Number 0
// set the id to the current count of agents so that it keeps incrementing 
exprPush {{ agent.callFeatMethod('Population', 'getActiveAgentsCount', 'TreeBranch') + 1 }} 
propPop treeID

ifExpr {{agent.getProp('treeID').value == 1}} [[
  featCall Costume setCostume 'tree_1_medium.png' 0
]]
ifExpr {{agent.getProp('treeID').value == 2}} [[
  featCall Costume setCostume 'tree_2_medium.png' 0
]]
ifExpr {{agent.getProp('treeID').value == 3}} [[
  featCall Costume setCostume 'tree_3_medium.png' 0
]]


# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE
`
    },
    {
      "id": "Predator",
      "label": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'predator_s.png' 0

useFeature Physics
featProp Physics scale setTo 0.1

addProp attackCounter Number 0
addProp attackCounterMax Number 10
propPush attackCounterMax
propPop attackCounter

useFeature Population
useFeature Global

ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'foundOneToKill') == undefined }} [[
    featCall Global addGlobalProp foundOneToKill Boolean false

]]


# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

  every 1 runAtStart [[
    prop attackCounter sub 1
    ifExpr {{ Predator.getProp('attackCounter').value == 0 }} [[
      prop global.foundOneToKill setTo false

        featCall Population agentsForEach Moth [[

          // first look for a living moth that is flying
          ifExpr {{ agent.getProp('causeOfDeath').value == 'alive' && agent.getProp('flying').value == true  && global.getProp('foundOneToKill').value == false}} [[
            prop global.foundOneToKill setTo true
            prop agent.causeOfDeath setTo 'ripped'
            prop agent.energy setTo 0

            featCall Population createAgent PopupEffect [[
               featCall agent.Costume setAnimatedCostume 'claws1.png' 1
               featProp agent.Physics scale setTo 0.05

            ]]

            ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
              featCall agent.Costume setCostume 'moth_ripped_dark.png' 0
              prop agent.isInert setTo true
            ]]
            ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
              featCall agent.Costume setCostume 'moth_ripped_light.png' 0
              prop agent.isInert setTo true
            ]]

          ]]
        ]]

        // if no one was killed, keep going and check those who are not flying, but not camouflaged
        ifExpr {{ global.getProp('foundOneToKill').value == false }} [[
          featCall Population agentsForEach Moth [[
            ifExpr {{ agent.getProp('causeOfDeath').value == 'alive' && agent.getProp('camouflaged').value == false  && global.getProp('foundOneToKill').value == false }} [[
                prop global.foundOneToKill setTo true
                prop agent.causeOfDeath setTo 'ripped'

                ifExpr {{ agent.getProp('lightOrDark').value == 'dark' }} [[
                  featCall agent.Costume setCostume 'moth_ripped_dark.png' 0
                  prop agent.energy setTo 0
                  prop agent.isInert setTo true
                ]]
                ifExpr {{ agent.getProp('lightOrDark').value == 'light' }} [[
                  featCall agent.Costume setCostume 'moth_ripped_light.png' 0
                  prop agent.energy setTo 0                 
                  prop agent.isInert setTo true
                ]]

            ]]
          ]]
        ]]
    
        // if still no one was killed  ... then let's look again next second so we can maybe catch someone 
        ifExpr {{ global.getProp('foundOneToKill').value == false }} [[
          prop attackCounter setTo 1
        ]]
        
        // if someone was killed above in any of the conditions, reset the counter 
        ifExpr {{ global.getProp('foundOneToKill').value == true }} [[
            propPush attackCounterMax
            propPop attackCounter
        ]]

    ]]
  ]]
`
    },
    {
      "id": "Fruit",
      "label": "Fruit",
      "scriptText": `# BLUEPRINT Fruit
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'moth_fruits-green.png' 0

useFeature Physics
featProp Physics scale setTo 0.05

useFeature AgentWidgets

addProp energy Number 10
prop energy setMax 10
prop energy setMin 0

featCall AgentWidgets setMeterPosition 'middle'
featCall AgentWidgets bindMeterTo energy
featProp AgentWidgets text setTo ''

addProp regenFruitCounter Number 20

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

  every 1 runAtStart [[

    prop regenFruitCounter sub 1
    ifExpr {{ Fruit.getProp('regenFruitCounter').value == 0 }} [[
      featCall Costume setCostume 'moth_fruits_eaten.png' 0
      prop energy setTo 10
      prop regenFruitCounter setTo 20
    ]]
  ]]

`
    },
    {
      "id": "PopupEffect",
      "label": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE

// use a circle temorarily ... 
useFeature Costume
featCall Costume setCostume 'circle.json'

useFeature Physics
useFeature Population

addProp countDown Number 2

# PROGRAM INIT 
# PROGRAM EVENT
# PROGRAM UPDATE

every 1 runAtStart [[
  prop countDown sub 1
  ifExpr {{ agent.getProp('countDown').value == 0 }} [[
    featCall Population removeAgent
  ]]
]]
`
    },
    {
      "id": "background",
      "label": "background",
      "scriptText": `# BLUEPRINT background
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'moth_sky.png' 0
featCall Costume setScale 1
// useFeature Movement
# PROGRAM EVENT

# PROGRAM UPDATE
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Predator",
      "bpid": "Predator",
      "initScript": `prop x setTo -400.57
prop y setTo -342.27
prop orientation setTo 45
`
    },
    {
      "id": "1",
      "label": "TreeBranch1",
      "bpid": "TreeBranch",
      "initScript": `prop x setTo 231.11
prop y setTo 36.21`
    },
    {
      "id": "2",
      "label": "TreeBranch2",
      "bpid": "TreeBranch",
      "initScript": `prop x setTo -164.44
prop y setTo 40.10
      `
    },
    {
      "id": "3",
      "label": "Fruit3",
      "bpid": "Fruit",
      "initScript": `prop x setTo -241.30
prop y setTo -344.04`
    },
    {
      "id": "4",
      "label": "Fruit4",
      "bpid": "Fruit",
      "initScript": `prop x setTo 304.06
prop y setTo -332.32`
    },
    {
      "id": "5",
      "label": "Fruit5",
      "bpid": "Fruit",
      "initScript": `prop x setTo 221.83
prop y setTo -161.05`
    },
    {
      "id": "6",
      "label": "Fruit6",
      "bpid": "Fruit",
      "initScript": `prop x setTo 298.85
prop y setTo -13.43`
    },
    {
      "id": "7",
      "label": "Fruit7",
      "bpid": "Fruit",
      "initScript": `prop x setTo -242.62
prop y setTo -149.30`
    },
    {
      "id": "8",
      "label": "Fruit8",
      "bpid": "Fruit",
      "initScript": `prop x setTo -108.43
prop y setTo -275.80`
    },
    {
      "id": "100",
      "label": "background0",
      "bpid": "background",
      "initScript": `prop x setTo 0
prop y setTo 0
prop scale setTo 0.3
prop zIndex setTo -500`
    }
  ]
}