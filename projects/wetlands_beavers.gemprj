{
  "id": "wetlands_beavers",
  "label": "Wetlands: Beavers 1",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [false, false],
    "bounce": true,
    "bgcolor": 505,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// üîé WHAT DOES MODEL DO?
// üîé TODO: Add a description of this beaver model.

prop global.visible setTo false


// to help us keep track in the water
// the dam needs to update this 
addProp damBuildLevel number  1

// change this to true once the water is a certain size
addProp canBuildLodge boolean false

// required directive
# PROGRAM UPDATE

every 0.5 [[
  ifProp global.damBuildLevel greaterThan 5 [[
    prop global.canBuildLodge setTo true
  ]]
  ifProp global.damBuildLevel lessThan 5 [[
    prop global.canBuildLodge setTo false
  ]]
]]
`
    },
    {
      "name": "Beaver",
      "scriptText": `# BLUEPRINT Beaver
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// setup features
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU
addFeature Graphing

// set initial costume and resize
featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
featProp Beaver.Costume.scale setTo 0.2

// the beaver can carry nothing, twig, rock, or mud
addProp carrying string 'nothing'
featCall Beaver.IU logString 'Beaver started off carrying nothing'

// if the GestureHelper is touching the beaver, set to true
// if it moves off, set to false
addProp gesturing boolean false
addProp gestureTimer number 0

// setup to see if the beaver is touching anything it might pick up
featCall Beaver.Touches monitor 'Twig' b2b
featCall Beaver.Touches monitor 'Rock' b2b
featCall Beaver.Touches monitor 'Mud' b2b
featCall Beaver.Touches monitor 'Water' b2b
featCall Beaver.Touches monitor 'Lodge' b2b
featCall Beaver.Touches monitor 'Dam' b2b

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish
when Beaver firsttouches Twig [[
  // If the beaver isn't carrying anything yet, pick up the twig
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up a twig'
    prop Beaver.carrying setTo 'twig'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_twig.png'
    featCall Twig.Population removeCharacter
  ]]
]]

when Beaver touches Dam [[
  every 1 [[
    ifProp Beaver.carrying equal 'twig' [[
      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[
        featCall Beaver.IU logString 'Beaver adding a twig to the dam'
        featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
        prop Beaver.carrying setTo 'nothing'
        prop Dam.buildLevel add 1
        propPush Dam.buildLevel
        propPop global.damBuildLevel
      ]]
    ]]
  ]]
]]

when Beaver touches Lodge [[
  every 1 [[
    ifProp Beaver.carrying equal 'twig' [[
      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[
        ifProp global.canBuildLodge equal true [[
          featCall Beaver.IU logString 'Beaver adding a twig to the lodge'
          featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
          prop Beaver.carrying setTo 'nothing'
          prop Lodge.buildLevel add 1
        ]]
        ifProp global.canBuildLodge equal false [[
          featCall Beaver.IU logString 'Beaver drops a twig but the lodge cant be built yet so it disappears'
          featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
          prop Beaver.carrying setTo 'nothing'
        ]]
      ]]
    ]]
  ]]
]]

every 1 [[
  ifProp Beaver.gesturing equal true [[
    prop Beaver.gestureTimer add 1
  ]]
  ifProp Beaver.gesturing equal false [[
    prop Beaver.gestureTimer setTo 0
  ]]
]]`
    },
    {
      "name": "Twig",
      "scriptText": `# BLUEPRINT Twig
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Twig.Costume.costumeName setTo 'WL_twig.png'
featProp Twig.Costume.scale setTo 0.2

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish`
    },
    {
      "name": "GestureHelper",
      "scriptText": `# BLUEPRINT GestureHelper
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// üîé WHAT DOES the GestureHelper DO?
// üîé This is a character so that lets a helper tell GEM-STEP when
// üîé the person pretending to be a beaver is doing the right gesture
// üîé to put down what it is carrying (either helping build something or dropping it)

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
featProp GestureHelper.Costume.costumeName setTo 'GEN_circle.json'
featProp GestureHelper.Costume.scale setTo 0.1
prop GestureHelper.alpha setTo 0.5
featCall GestureHelper.Touches monitor 'Beaver' b2b

# PROGRAM UPDATE


when GestureHelper firsttouches Beaver [[
  // insert code here
  prop Beaver.gesturing setTo true
  featCall Beaver.IU logString 'Beaver started gesturing'
]]

when GestureHelper lasttouches Beaver [[
  // insert code here
  prop Beaver.gesturing setTo false
  featCall Beaver.IU logString 'Beaver stopped gesturing'

]]



// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "Lodge",
      "scriptText": `# BLUEPRINT Lodge
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Lodge.Costume.costumeName setTo 'GEN_square.json'
featProp Lodge.Costume.width setTo 100
featProp Lodge.Costume.height setTo 40
featCall Lodge.Costume setColorizeHSV 0.1 0.2 0.8

addProp buildLevel number 1
prop Lodge.buildLevel setMin 1
prop Lodge.buildLevel setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0

# PROGRAM UPDATE

// TODO: somehow indicate you can now build a lodge

every 0.5 [[
  // re-scale based on the buildLevel
  propPush Lodge.buildLevel
  propPop Lodge.tempWidth
  prop Lodge.tempWidth mul 20
  prop Lodge.tempWidth add 80
  propPush Lodge.tempWidth
  featPropPop Lodge.Costume.width

  ifProp global.canBuildLodge equal true [[
    // make it clear we can now build
    featCall Lodge.Costume setColorizeHSV 0.1 0.4 0.8
  ]]
]]`
    },
    {
      "name": "Dam",
      "scriptText": `# BLUEPRINT Dam
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Dam.Costume.costumeName setTo 'GEN_square.json'
featProp Dam.Costume.width setTo 100
featProp Dam.Costume.height setTo 40
featCall Dam.Costume setColorizeHSV 0.1 0.4 0.8

addProp buildLevel number 1
prop Dam.buildLevel setMin 1
prop Dam.buildLevel setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0

# PROGRAM UPDATE

every 0.5 [[
    // re-scale based on the buildLevel
    propPush Dam.buildLevel 
    propPop Dam.tempWidth
    prop Dam.tempWidth mul 20
    prop Dam.tempWidth add 80
    propPush Dam.tempWidth
    featPropPop Dam.Costume.width
  ]]
`
    },
    {
      "name": "Water",
      "scriptText": `# BLUEPRINT Water
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Water.Costume.costumeName setTo 'GEN_square.json'
featProp Water.Costume.width setTo 200
featProp Water.Costume.height setTo 400
featCall Water.Costume setColorizeHSV 0.5 0.2 0.6
prop Water.zIndex setTo -200

addProp buildLevel number 1
prop Water.buildLevel setMin 1
prop Water.buildLevel setMax 10

// used in calculating the width to match build level
addProp tempWidth number 0

// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

// this can be fast, medium, or slow
addProp speedOfWater string 'fast'

# PROGRAM UPDATE

every 0.5 [[
  // only the water above the dam changes
  ifProp Water.location equal 'aboveDam' [[
    propPush global.damBuildLevel
    propPop Water.buildLevel
    propPush Water.buildLevel 
    propPop Water.tempWidth
    prop Water.tempWidth mul 30
    prop Water.tempWidth add 170
    propPush Water.tempWidth
    featPropPop Water.Costume.width
  ]]

  // change the water speed based on the size of this water, assuming
  // it moves faster when it is narrower, and slows down as it pools
  ifProp Water.buildLevel lessThanOrEqual 3 [[
    prop Water.speedOfWater setTo 'fast'
  ]]
  ifProp Water.buildLevel greaterThan 3 [[
    prop Water.speedOfWater setTo 'medium'
  ]]
  ifProp Water.buildLevel greaterThanOrEqual 5 [[
    prop Water.speedOfWater setTo 'slow'
  ]]

]]

`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Twig 1",
      "bpid": "Twig",
      "initScript": `prop x setTo -331.63
prop y setTo -164.14`
    },
    {
      "id": "1",
      "label": "Lodge",
      "bpid": "Lodge",
      "initScript": `prop x setTo 0
prop y setTo -225`
    },
    {
      "id": "2",
      "label": "Dam",
      "bpid": "Dam",
      "initScript": `prop x setTo 0
prop y setTo 0`
    },
    {
      "id": "3",
      "label": "Water 1",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo -200
prop location setTo 'aboveDam'
`
    },
    {
      "id": "4",
      "label": "Water 2",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo 200
prop location setTo 'belowDam'
`
    },
    {
      "id": "5",
      "label": "Twig 2",
      "bpid": "Twig",
      "initScript": `prop x setTo -317.10
prop y setTo -134.30`
    },
    {
      "id": "6",
      "label": "Twig 3",
      "bpid": "Twig",
      "initScript": `prop x setTo -336.43
prop y setTo -73.87`
    },
    {
      "id": "7",
      "label": "Twig 4",
      "bpid": "Twig",
      "initScript": `prop x setTo -316.76
prop y setTo -106.20`
    },
    {
      "id": "8",
      "label": "Twig 5",
      "bpid": "Twig",
      "initScript": `prop x setTo 271.12
prop y setTo -187.04`
    },
    {
      "id": "9",
      "label": "Twig 6",
      "bpid": "Twig",
      "initScript": `prop x setTo 174.69
prop y setTo -159.15`
    },
    {
      "id": "10",
      "label": "Twig 7",
      "bpid": "Twig",
      "initScript": `prop x setTo 244.54
prop y setTo 172.90`
    }
  ]
}
