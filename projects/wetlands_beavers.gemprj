{
  "id": "wetlands_beavers",
  "label": "Wetlands: Beavers 1",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 505,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// üîé WHAT DOES MODEL DO?
// üîé TODO: Add a description of this beaver model.

addFeature IU

prop global.visible setTo false

// to help us keep track in the water
// the dam needs to update this
addProp damBuildLevel number 1

// change this to true once the water is a certain size
addProp canBuildLodge boolean false

// count of currently alive water plants
// the plants themselves update the count in the touches script
addProp waterPlantCount number 0

// to make it easier to place then hide the plants
addProp showWaterPlantsToPlace boolean false

// required directive
# PROGRAM UPDATE



// TODO: add a check to see if the lodge can't be build, so if it flips
// we can log it.
every 0.5 [[
  ifProp global.damBuildLevel greaterThan 5 [[
    // so we know it is about to flip
    ifProp global.canBuildLodge equal false [[
      featProp global.IU.logStringText setTo 'The water is deep and slow enough to build the lodge now'
      featCall global.IU logProperty
      prop global.canBuildLodge setTo true
    ]]
  ]]
  ifProp global.damBuildLevel lessThan 5 [[
    prop global.canBuildLodge setTo false
  ]]
]]`
    },
    {
      "name": "Beaver",
      "scriptText": `# BLUEPRINT Beaver
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// setup features
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU
addFeature Graphing
addFeature Movement


// set initial costume and resize
featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
featProp Beaver.Costume.scale setTo 0.15
prop Beaver.zIndex setTo 200

// the beaver can carry nothing, twig, rock, or mud
addProp carrying string 'nothing'

// if the GestureHelper is touching the beaver, set to true
// if it moves off, set to false
addProp gesturing boolean false
addProp gestureTimer number 0

// For logging more elaborate ideas
addProp tempString string ''

// for predator handling - true if hidden
addProp protected boolean false

addProp energyLevel number 100
prop Beaver.energyLevel setMin 0
prop Beaver.energyLevel setMax 100

// setup to see if the beaver is touching anything it might pick up
featCall Beaver.Touches monitor 'Twig' b2b
featCall Beaver.Touches monitor 'Rock' b2b
featCall Beaver.Touches monitor 'Mud' b2b
featCall Beaver.Touches monitor 'Water' b2b
featCall Beaver.Touches monitor 'Lodge' b2b
featCall Beaver.Touches monitor 'Dam' b2b
featCall Beaver.Touches monitor 'Stump' b2b
featCall Beaver.Touches monitor 'DropArea' b2b


addProp displayText string ''
propPush Beaver.trackerId
propPop Beaver.displayText
featProp Beaver.Graphing.textProp setTo 'displayText'
featProp Beaver.Graphing.meterProp setTo 'energyLevel'
featProp Beaver.Graphing.meterColor setTo 65280

// ‚úèÔ∏è LETS CHANGE THIS: Does the beaver lose energy?
// ‚úèÔ∏è This helps us explore the model without worrying about food
addProp beaverLosesEnergy boolean false

// log the value of beaverLosesEnergy
ifProp Beaver.beaverLosesEnergy equal true [[
  featCall Beaver.IU logString 'Beaver started with beaverLosesEnergy set to true'
]]
ifProp Beaver.beaverLosesEnergy equal false [[
  featCall Beaver.IU logString 'Beaver started with beaverLosesEnergy set to false'
]]

featCall Beaver.IU logString 'The beaver started off carrying nothing'


# PROGRAM UPDATE

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Beaver.Movement.compassDirection equal 'E' [[
  featProp Beaver.Costume.flipX setTo false
]]
ifFeatProp Beaver.Movement.compassDirection equal 'W' [[
  featProp Beaver.Costume.flipX setTo true
]]

when Beaver firsttouches Twig [[
  // If the beaver isn't carrying anything yet, pick up the twig
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up a twig'
    prop Beaver.carrying setTo 'twig'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_twig.png'
    featCall Twig.Population removeCharacter
  ]]
]]

when Beaver firsttouches Rock [[
  // If the beaver isn't carrying anything yet, pick up the rock
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up a rock'
    prop Beaver.carrying setTo 'rock'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_rock.png'
    featCall Rock.Population removeCharacter
  ]]
]]

when Beaver firsttouches Mud [[
  // If the beaver isn't carrying anything yet, pick up the mud
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up some mud'
    prop Beaver.carrying setTo 'mud'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_mud.png'
    featCall Mud.Population removeCharacter
  ]]
]]

when Beaver touches Dam [[
  every 1 [[

    // We are carrying a rock, mud, or twig
    ifProp Beaver.carrying notEqual 'nothing' [[
      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[

        // Depending on what we were carrying, log it
        // we could use the carrying to break this up, but use the if assuming we'll need to track this later.
        prop Beaver.tempString setTo 'The beaver added a '
        ifProp Beaver.carrying equal 'twig' [[
          prop Beaver.tempString add 'twig '
        ]]
        ifProp Beaver.carrying equal 'rock' [[
          prop Beaver.tempString add 'rock '
        ]]
        ifProp Beaver.carrying equal 'mud' [[
          prop Beaver.tempString add 'mud '
        ]]
        prop Beaver.tempString add 'to the dam.'
        propPush Beaver.tempString
        featPropPop Beaver.IU.logStringText

        featCall Beaver.IU logProperty

        // Show we dropped what we were carrying and update the dam
        featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
        prop Beaver.carrying setTo 'nothing'
        prop Dam.buildLevel add 1
        propPush Dam.buildLevel
        propPop global.damBuildLevel
      ]]
    ]]
  ]]
]]

// TODO - if the lodge is above a build level 5, protect the beaver when firstTouches and undo on lasttouches
when Beaver firsttouches Lodge [[
  ifProp Lodge.buildLevel greaterThanOrEqual 3 [[
    prop Beaver.protected setTo true
    featCall Beaver.IU logString 'Beaver is protected in the lodge'

    prop Beaver.displayText add ' üõ°'
  ]]
  ifProp Lodge.buildLevel lessThan 3 [[
    featCall Beaver.IU logString 'Beaver is near the lodge, but the lodge is not big enough to protect it'
  ]]
]]
when Beaver lasttouches Lodge [[
  ifProp Beaver.protected equal true [[
    prop Beaver.protected setTo false
    featCall Beaver.IU logString 'Beaver left the lodge so is no-longer protected'

    propPush Beaver.trackerId
    propPop Beaver.displayText

  ]]
]]

when Beaver touches Lodge [[
  every 1 [[
    ifProp Beaver.carrying notEqual 'nothing' [[
      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[
        ifProp global.canBuildLodge equal true [[

          // Depending on what we were carrying, log it
          // we could use the carrying to break this up, but use the if assuming we'll need to track this later.
          prop Beaver.tempString setTo 'The beaver added a '
          ifProp Beaver.carrying equal 'twig' [[
            prop Beaver.tempString add 'twig '
          ]]
          ifProp Beaver.carrying equal 'rock' [[
            prop Beaver.tempString add 'rock '
          ]]
          ifProp Beaver.carrying equal 'mud' [[
            prop Beaver.tempString add 'mud '
          ]]
          prop Beaver.tempString add 'to the lodge.'
          propPush Beaver.tempString
          featPropPop Beaver.IU.logStringText

          featCall Beaver.IU logProperty

          // update the beave so we know it isn't carrying anything any more
          featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
          prop Beaver.carrying setTo 'nothing'
          prop Lodge.buildLevel add 1
        ]]
        ifProp global.canBuildLodge equal false [[
          featCall Beaver.IU logString 'Beaver drops what it was carrying but the lodge cannot be built yet so it disappears'
          featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
          prop Beaver.carrying setTo 'nothing'
        ]]
      ]]
    ]]
  ]]
]]

when Beaver touches DropArea [[
  // update the beave so we know it isn't carrying anything any more
  featCall Beaver.IU logString 'Beaver dropped what it was carrying in the DropArea'
  featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
  prop Beaver.carrying setTo 'nothing'
]]

when Beaver touches Stump [[
  every 1 [[
    featCall Beaver.IU logString 'Beaver ate some wood at a stump'
    prop Beaver.energyLevel add 20
  ]]
]]

every 1 [[

  ifProp Beaver.beaverLosesEnergy equal true [[
    // lower energyLevel because living takes energy
    prop Beaver.energyLevel sub 5
  ]]

  // check if the beaver is ok
  // but only if it hasn't already been killed by a predator
  ifProp Beaver.isInert equal false [[
    ifProp Beaver.energyLevel equal 0 [[
      featCall Beaver.IU logString 'Beaver died from starvation'
      prop Beaver.alpha setTo 0.5
      prop Beaver.isInert setTo true
      prop Beaver.energyLevel setTo 0
    ]]
  ]]

  // check if gesturing, and then handle that inside the when touches above
  ifProp Beaver.gesturing equal true [[
    prop Beaver.gestureTimer add 1
  ]]
  ifProp Beaver.gesturing equal false [[
    prop Beaver.gestureTimer setTo 0
  ]]
]]`
    },
    {
      "name": "Twig",
      "scriptText": `# BLUEPRINT Twig
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Twig.Costume.costumeName setTo 'WL_twig.png'
featProp Twig.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Rock.Costume.costumeName setTo 'WL_rock.png'
featProp Rock.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Mud",
      "scriptText": `# BLUEPRINT Mud
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Mud.Costume.costumeName setTo 'WL_mud.png'
featProp Mud.Costume.scale setTo 0.1

# PROGRAM UPDATE`
    },
    {
      "name": "GestureHelper",
      "scriptText": `# BLUEPRINT GestureHelper
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// üîé WHAT DOES the GestureHelper DO?
// üîé This is a character so that lets a helper tell GEM-STEP when
// üîé the person pretending to be a beaver is doing the right gesture
// üîé to put down what it is carrying (either helping build something or dropping it)

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
featProp GestureHelper.Costume.costumeName setTo 'GEN_circle.json'
featProp GestureHelper.Costume.scale setTo 0.1
prop GestureHelper.alpha setTo 0.5
featCall GestureHelper.Touches monitor 'Beaver' b2b

# PROGRAM UPDATE


when GestureHelper firsttouches Beaver [[
  prop Beaver.gesturing setTo true
  featCall Beaver.IU logString 'Player acting as a beaver started gesturing'
]]

when GestureHelper lasttouches Beaver [[
  prop Beaver.gesturing setTo false
  featCall Beaver.IU logString 'Player acting as a beaver stopped gesturing'

]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "Lodge",
      "scriptText": `# BLUEPRINT Lodge
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Lodge.Costume.costumeName setTo 'GEN_square.json'
featProp Lodge.Costume.width setTo 100
featProp Lodge.Costume.height setTo 40
featCall Lodge.Costume setColorizeHSV 0.1 0.2 0.8

addProp buildLevel number 1
prop Lodge.buildLevel setMin 1
prop Lodge.buildLevel setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0

# PROGRAM UPDATE

every 0.5 [[
  // re-scale based on the buildLevel
  propPush Lodge.buildLevel
  propPop Lodge.tempWidth
  prop Lodge.tempWidth mul 20
  prop Lodge.tempWidth add 80
  propPush Lodge.tempWidth
  featPropPop Lodge.Costume.width

  ifProp global.canBuildLodge equal true [[
    // make it clear we can now build
    featCall Lodge.Costume setColorizeHSV 0.1 0.4 0.8
  ]]
]]`
    },
    {
      "name": "Dam",
      "scriptText": `# BLUEPRINT Dam
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Dam.Costume.costumeName setTo 'GEN_square.json'
featProp Dam.Costume.width setTo 100
featProp Dam.Costume.height setTo 40
featCall Dam.Costume setColorizeHSV 0.1 0.4 0.8

addProp buildLevel number 1
prop Dam.buildLevel setMin 1
prop Dam.buildLevel setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0

# PROGRAM UPDATE

every 0.5 [[
  // re-scale based on the buildLevel
  propPush Dam.buildLevel
  propPop Dam.tempWidth
  prop Dam.tempWidth mul 20
  prop Dam.tempWidth add 80
  propPush Dam.tempWidth
  featPropPop Dam.Costume.width
]]`
    },
    {
      "name": "Water",
      "scriptText": `# BLUEPRINT Water
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Water.Costume.costumeName setTo 'GEN_square.json'
featProp Water.Costume.width setTo 200
featProp Water.Costume.height setTo 400
featCall Water.Costume setColorizeHSV 0.5 0.2 0.6
prop Water.zIndex setTo -200

addProp buildLevel number 1
prop Water.buildLevel setMin 1
prop Water.buildLevel setMax 10

// used in calculating the width to match build level
addProp tempWidth number 0

// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

// this can be fast, medium, or slow
addProp speedOfWater string 'fast'

# PROGRAM UPDATE

every 0.5 [[
  //  the water above the dam grows as the dam makes it pool
  ifProp Water.location equal 'aboveDam' [[
    propPush global.damBuildLevel
    propPop Water.buildLevel
    propPush Water.buildLevel
    propPop Water.tempWidth
    prop Water.tempWidth mul 30
    prop Water.tempWidth add 170
    propPush Water.tempWidth
    featPropPop Water.Costume.width
  ]]

  // the dam causes the water below it to shrink
  ifProp Water.location notEqual 'aboveDam' [[
    propPush global.damBuildLevel
    propPop Water.buildLevel
    propPush Water.buildLevel
    propPop Water.tempWidth
    prop Water.tempWidth mul -10
    prop Water.tempWidth add 210
    propPush Water.tempWidth
    featPropPop Water.Costume.width
  ]]

  // change the water speed based on the size of this water, assuming
  // it moves faster when it is narrower, and slows down as it pools
  ifProp Water.buildLevel lessThanOrEqual 3 [[
    prop Water.speedOfWater setTo 'fast'
  ]]
  ifProp Water.buildLevel greaterThan 3 [[
    prop Water.speedOfWater setTo 'medium'
  ]]
  ifProp Water.buildLevel greaterThanOrEqual 5 [[
    prop Water.speedOfWater setTo 'slow'
  ]]

]]`
    },
    {
      "name": "StreamBed",
      "scriptText": `# BLUEPRINT StreamBed
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp StreamBed.Costume.costumeName setTo 'GEN_square.json'
featProp StreamBed.Costume.width setTo 200
featProp StreamBed.Costume.height setTo 400
featCall StreamBed.Costume setColorizeHSV 0.1 0.9 0.7
prop StreamBed.zIndex setTo -300

# PROGRAM UPDATE`
    },
    {
      "name": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Predator.Costume.costumeName setTo 'WL_coyote.png'
featProp Predator.Costume.scale setTo 0.3

featCall Predator.Touches monitor 'Beaver' b2b

# PROGRAM UPDATE

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Predator.Movement.compassDirection equal 'W' [[
  featProp Predator.Costume.flipX setTo false
]]
ifFeatProp Predator.Movement.compassDirection equal 'E' [[
  featProp Predator.Costume.flipX setTo true
]]

when Predator firsttouches Beaver [[
  ifProp Beaver.protected equal false [[
    // the beaver is killed by the predator
    featCall Beaver.IU logString 'Beaver was killed by a predator because it was not protected'
    prop Beaver.alpha setTo 0.5
    prop Beaver.isInert setTo true
    prop Beaver.energyLevel setTo 0
  ]]
  ifProp Beaver.protected equal true [[
    featCall Beaver.IU logString 'The predator tried to attack the beaver but it was protected!'
  ]]

]]
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "WaterPlant",
      "scriptText": `# BLUEPRINT WaterPlant
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature IU

featProp WaterPlant.Costume.costumeName setTo 'WL_plant.png'
featProp WaterPlant.Costume.scale setTo 0.15

featCall WaterPlant.Touches monitor 'Water' c2b

addProp alive boolean false
prop WaterPlant.visible setTo false
propPush global.showWaterPlantsToPlace
propPop WaterPlant.visible

# PROGRAM UPDATE

// if the plant is suddenly under water, and the water is slow enough
// let's have it appear / grow
when WaterPlant centertouches Water [[
  // if the water is slow enough, become alive
  ifProp WaterPlant.alive equal false [[
    ifProp Water.speedOfWater notEqual 'fast' [[
      prop global.waterPlantCount add 1
      featCall WaterPlant.IU logString 'A new water plant grows because of enough deep, slow water'
      prop WaterPlant.alive setTo true
      prop WaterPlant.visible setTo true
    ]]
  ]]

  // if the water is suddenly too fast, dissapear
  ifProp WaterPlant.alive equal true [[
    ifProp Water.speedOfWater equal 'fast' [[
      prop global.waterPlantCount sub 1
      featCall WaterPlant.IU logString 'A water plant dies off because the water is too fast'
      prop WaterPlant.alive setTo false
      prop WaterPlant.visible setTo false
    ]]
  ]]
]]

  // if the water recedes, remove the plant
  when WaterPlant centerlasttouches Water [[
    ifProp WaterPlant.alive equal true [[
        prop WaterPlant.alive setTo false
        prop global.waterPlantCount sub 1
        featCall WaterPlant.IU logString 'A water plant dies off because the water receded'
        prop WaterPlant.visible setTo false
    ]]
]]`
    },
    {
      "name": "Stump",
      "scriptText": `# BLUEPRINT Stump
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

featProp Stump.Costume.costumeName setTo 'WL_stump.png'
featProp Stump.Costume.scale setTo 0.25

# PROGRAM UPDATE`
    },
    {
      "name": "DropArea",
      "scriptText": `# BLUEPRINT DropArea
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing

featProp DropArea.Costume.costumeName setTo 'GEN_square.json'
featProp DropArea.Costume.width setTo 50
featProp DropArea.Costume.height setTo 50
featCall DropArea.Costume setColorizeHSV 0.3 0.3 0.3

featProp DropArea.Graphing.text setTo 'Drop here'

# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Twig 1",
      "bpid": "Twig",
      "initScript": `prop x setTo -331.63
prop y setTo -164.14`
    },
    {
      "id": "1",
      "label": "Lodge",
      "bpid": "Lodge",
      "initScript": `prop x setTo 0
prop y setTo -225
prop Lodge.buildLevel setTo 1
`
    },
    {
      "id": "2",
      "label": "Dam",
      "bpid": "Dam",
      "initScript": `prop x setTo 0
prop y setTo 0
prop Dam.buildLevel setTo 1
`
    },
    {
      "id": "3",
      "label": "Water 1",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo -200
prop location setTo 'aboveDam'`
    },
    {
      "id": "4",
      "label": "Water 2",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo 199
prop location setTo 'belowDam'`
    },
    {
      "id": "5",
      "label": "Twig 2",
      "bpid": "Twig",
      "initScript": `prop x setTo -317.10
prop y setTo -134.30`
    },
    {
      "id": "6",
      "label": "Twig 3",
      "bpid": "Twig",
      "initScript": `prop x setTo -336.43
prop y setTo -73.87`
    },
    {
      "id": "7",
      "label": "Twig 4",
      "bpid": "Twig",
      "initScript": `prop x setTo -316.76
prop y setTo -106.20`
    },
    {
      "id": "8",
      "label": "Twig 5",
      "bpid": "Twig",
      "initScript": `prop x setTo 293.36
prop y setTo -167.77`
    },
    {
      "id": "9",
      "label": "Twig 6",
      "bpid": "Twig",
      "initScript": `prop x setTo 319.17
prop y setTo -197.40`
    },
    {
      "id": "10",
      "label": "Twig 7",
      "bpid": "Twig",
      "initScript": `prop x setTo 233.44
prop y setTo 314.78`
    },
    {
      "id": "11",
      "label": "Mud11",
      "bpid": "Mud",
      "initScript": `prop x setTo 282.14
prop y setTo 21.75`
    },
    {
      "id": "12",
      "label": "Rock12",
      "bpid": "Rock",
      "initScript": `prop x setTo 313.35
prop y setTo -309.91`
    },
    {
      "id": "13",
      "label": "Rock13",
      "bpid": "Rock",
      "initScript": `prop x setTo -303.54
prop y setTo 165.14`
    },
    {
      "id": "14",
      "label": "Mud14",
      "bpid": "Mud",
      "initScript": `prop x setTo 309.95
prop y setTo 66.96`
    },
    {
      "id": "15",
      "label": "Mud15",
      "bpid": "Mud",
      "initScript": `prop x setTo 277.77
prop y setTo 47.90`
    },
    {
      "id": "16",
      "label": "Rock16",
      "bpid": "Rock",
      "initScript": `prop x setTo -361.11
prop y setTo 180.27`
    },
    {
      "id": "17",
      "label": "WaterPlant",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo 68.07
prop y setTo -301.81

`
    },
    {
      "id": "18",
      "label": "Stump18",
      "bpid": "Stump",
      "initScript": `prop x setTo 322.11
prop y setTo 224.4`
    },
    {
      "id": "19",
      "label": "Stump19",
      "bpid": "Stump",
      "initScript": `prop x setTo -316.54
prop y setTo -331.01`
    },
    {
      "id": "20",
      "label": "Stump20",
      "bpid": "Stump",
      "initScript": `prop x setTo 226.08
prop y setTo -359.92`
    },
    {
      "id": "21",
      "label": "DropArea",
      "bpid": "DropArea",
      "initScript": `prop x setTo -352.87
prop y setTo 318.78`
    },
    {
      "id": "22",
      "label": "WaterPlant 2",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo -52.01
prop y setTo -372.58
`
    },
    {
      "id": "23",
      "label": "WaterPlant 3",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo 181.57
prop y setTo -249.59
`
    },
    {
      "id": "24",
      "label": "WaterPlant 4",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo -209.94
prop y setTo -274.44
`
    },
    {
      "id": "25",
      "label": "WaterPlant 5",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo -93.72
prop y setTo -44.98
`
    },
    {
      "id": "26",
      "label": "WaterPlant 6",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo 191.07
prop y setTo -93.94
`
    },
    {
      "id": "27",
      "label": "StreamBed",
      "bpid": "StreamBed",
      "initScript": `prop x setTo 0
prop y setTo 199`
    }
  ]
}