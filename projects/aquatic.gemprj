{
  "id": "aquatic",
  "label": "Aquatic Ecosystem",
  "description": "Tweaks for later runs",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
// This is the script that runs when the model is setup
# PROGRAM INIT

// EXPLANATION of this model:
// This model involves learners repreesenting fish eating algae
// The goal is to explore how the number of fish, number of algae,
// and different locations can impact the survival of the ecosystem

prop global.visible setTo false

// =============================================================
// Add any code for global properties here (e,g. addProp)


// =============================================================


// this is a required keyword in case we want to run script
// every second. Most likely we will do that in specific characters instead
# PROGRAM UPDATE`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false


// EXPLANATION:
// This is the Fish character
// In this ecosystem model, we have producers and consumers that interact
// The Fish are consumers, eating the Algae, which are producers
// See the Algae script for details of how it produces energy via the Sunbeams

# PROGRAM INIT
addFeature Costume
addFeature Movement
addFeature AgentWidgets
addFeature Physics

// Set the fish artwork and make it 1/2 size since it is really big
featProp Fish.Costume.costumeName setTo 'fish.png'
featProp Fish.Costume.scale setTo 0.5

// Setup the fish energyLevel property to be between 0 and 100, but start at 30
addProp energyLevel number 30
prop Fish.energyLevel setMax 100
prop Fish.energyLevel setMin 0

// this ecosystem has producers and consumers
// the fish are consumers, meaning that they eat other things (e.g., Algae) for energy
// the fish in this ecosystem also happen to be herbivores meaning it only eats plants and not other creatures
addProp energyType string 'consumer'
addProp consumerType string 'herbivore'

// set Touches
addFeature Touches
featCall Fish.Touches monitor 'Algae' b2b

// show meter immediately
featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'

// set name
exprPush {{ Fish.name }}
featPropPop Fish.AgentWidgets.text


# PROGRAM UPDATE
onEvent Start [[

  // This tells any fish that are controlled by the computer instead of by a student
  // to wander around randomly, and eat any algae that they bump into
  featProp Fish.Movement.movementType setTo 'wander'

  // STUDENTS_MAY_CHANGE to make fish move faster when they are automatic
  featProp Fish.Movement.distance setTo 2

]]

// This script flips the artowkr depending on whether the fish is moving left or right
ifFeatProp Fish.Movement.compassDirection equal 'E' [[
  featProp Fish.Costume.flipX setTo false
]]
ifFeatProp Fish.Movement.compassDirection equal 'W' [[
  featProp Fish.Costume.flipX setTo true
]]

// whenever the fish is touching an algae
when Fish touches Algae [[
  // do the rest of this once every second (instead of 30 times a second which is too much)
  every 1 runAtStart [[

    // EXPLANATION:
    // This is the script that has the fish eat a little algae at a time.

    // STUDENTS_MAY_CHANGE
    // first, take the energy from the algae
    prop Algae.energyLevel sub 10
    // the fish ate the algae and digests it
    // next have the fish gain some energy
    prop Fish.energyLevel add 10

    // finally, make the fish glow so tha we know something is happening
    featProp Fish.Costume.glow setTo 4

    // if the algae is out of energy, it is dead so make it
    // faded and inert which means it won't interact with other things
    // also set it to be really small so we know it is just the leftover bits
    ifProp Algae.energyLevel lessThanOrEqual 0 [[
      prop Algae.alpha setTo 0.5
      // featProp Algae.Costume.scale setTo 0.1
      prop Algae.isInert setTo true
    ]]

  ]]
]]

// When a fish moves off of algae, it will not glow anymore and will stop eating
when Fish lastTouches Algae [[
  featProp Fish.Costume.glow setTo 0
]]


every 1 runAtStart [[
  // STUDENTS_MAY_CHANGE - Every second, the Fish use 3 energy. If this number is higher, they will
  // lose energy faster
  prop Fish.energyLevel sub 3

  // sated
  ifProp Fish.energyLevel greaterThanOrEqual 50 [[
    featProp Fish.Costume.costumeName setTo 'fish.png'
    // Green
    featProp Fish.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifProp Fish.energyLevel lessThan 50 [[
    featProp Fish.Costume.costumeName setTo 'fish_hungry.png'
    // Orange
    featProp Fish.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifProp Fish.energyLevel lessThan 20 [[
    featProp Fish.Costume.costumeName setTo 'fish_hungry.png'
    // Red
    featProp Fish.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifProp Fish.energyLevel equal 0 [[
    featProp Fish.Costume.costumeName setTo 'fish_dead'
    // Switch to floating if this fish is not controlled by a student
    featProp Fish.Movement.movementType setTo 'float'
    // make the fish faded so that it looks dead
    prop Fish.alpha setTo 0.3
    // this means that we wont test if this fish is touching anything anymore
    prop Fish.isInert setTo true
  ]]


]]`
    },
    {
      "name": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// EXPLANATION:
// This is the Algae character
// In this ecosystem model, we have producers and consumers that interact
// The Algae are a producer, growing when they touch the sunbeam
// The algae gets eaten by Fish and other creatures (see the Fish script for details)

# PROGRAM INIT

addFeature Costume
addFeature Movement
addFeature Population
addFeature AgentWidgets
addFeature Physics
addFeature Touches

// Algae are producers, which means they take in energy from the sun
// and convert that to food. Producers are eaten by consumers like fish.
addProp energyType string 'producer'

// This sets the art for the algae character
featProp Algae.Costume.costumeName setTo 'algae.png'

// This shows the energyLevel next to the algae character
featProp Algae.AgentWidgets.meterProp setTo 'energyLevel'

// setup energyLevel property to be between 0 and 100
addProp energyLevel number 75
prop Algae.energyLevel setMax 100
prop Algae.energyLevel setMin 0

// Make the algae appear farther back so that we can see fish in front of them
prop Algae.zIndex setTo 1

// Set the color of the energy meter depending on the amount of energy that the algae has
ifProp Algae.energyLevel greaterThanOrEqual 50 [[
  // set the meter to green
  featProp Algae.AgentWidgets.meterColor setTo 65280
]]
ifProp Algae.energyLevel lessThan 50 [[
  // set the meter to orange
  featProp Algae.AgentWidgets.meterColor setTo 16737792
]]
ifProp Algae.energyLevel lessThan 20 [[
  // set the meter to red
  featProp Algae.AgentWidgets.meterColor setTo 16711680
]]


// Setup the algae to see if it is touching the sunbeam so that we know if it should be getting more energy.
// If it is, call the when Algae touches Sun script below
featCall Algae.Touches monitor 'Sunbeam' b2b

// This tells the algae that we don't need a label underneath it, so make that blank
featProp Algae.AgentWidgets.text setTo ''

// Setup movement to wander
featProp Algae.Movement.movementType setTo 'wander'
featProp Algae.Movement.distance setTo 0.2

// scale the algae to it's starting size
// we divide by 350 instead of 100 because the algae are really big and we want to make
// them smaller to fit on-screen.
exprPush {{ (Algae.getProp('energyLevel').value / 350) }}
featPropPop Algae.Costume.scale

// Move the algae back so that it is behind the fish
prop Algae.zIndex setTo -110

# PROGRAM UPDATE
// This script happens once every second whenever the algae is touching the sunbeam
when Algae touches Sunbeam [[
  every 1 runAfter [[
    // This is the script that says how much energy the algae gains whenever it touches the sun
    // This much energy is added every second
    // STUDENTS_MAY_CHANGE: if you make this number higher, the algae will grow back faster
    prop Algae.energyLevel add 5

  ]]
]]

// When the algae moves out of the sunbeam, stop glowing
// It will also stop getting energy since that script
// won't get called unless it moves back into the sunbeam.
when Algae lastTouches Sunbeam [[
  featProp Algae.Costume.glow setTo 0
]]

every 1 runAtStart [[

  // The algae uses a little bit of energy every second to stay alive
  // STUDENTS_MAY_CHANGE: Let's change this number if we want them to
  // use more or less energy every second . A higher number will mean they
  // lose energy faster.
  prop Algae.energyLevel sub 1

  // Set the color of the energy meter depending on the amount of energy that the algae has
  // Reminder that this energy is between 0 and 100, so 50 is 1/2 of the energy still there
  // That's still pretty good, so we are making it green
  ifProp Algae.energyLevel greaterThanOrEqual 50 [[
    // set the meter to green
    featProp Algae.AgentWidgets.meterColor setTo 65280
  ]]
  ifProp Algae.energyLevel lessThan 50 [[
    // set the meter to orange
    featProp Algae.AgentWidgets.meterColor setTo 16737792
  ]]
  ifProp Algae.energyLevel lessThan 20 [[
    // set the meter to red
    featProp Algae.AgentWidgets.meterColor setTo 16711680
  ]]

  // re-size the algae based on its energy level (make it smaller if it has less energy)
  ifProp Algae.energyLevel greaterThan 0 [[
    exprPush {{ (Algae.getProp('energyLevel').value / 350) }}
    featPropPop Algae.Costume.scale
  ]]

  // Don't let the algae totally disappear
  ifFeatProp Algae.Costume.scale lessThanOrEqual 0.1 [[
    featProp Algae.Costume.scale setTo 0.1
  ]]

]]`
    },
    {
      "name": "Sunbeam",
      "scriptText": `# BLUEPRINT Sunbeam
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// The Sunbeam character represents a beam of light that moves across the water 
// as the sun moves in the sky. This is a source of energy that the producers
// use to convert into their own energy and matter (see the algae script for details)

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Sunbeam.Costume.costumeName setTo 'sunbeam.png'

// the sun is a source of energy
addProp energyType string 'source'

// STUDENTS_MAY_CHANGE - to set the speed of the sunbeam
addProp speed number 20

// STUDENTS_MAY_CHANGE - to set which direction the sunbeam moves (right: 1, left: -1)
addProp direction number 1

// STUDENTS_MAY_CHANGE - how wide the sunbeam is
featProp Sunbeam.Costume.scale setTo 1

// STUDENTS_MAY_CHANGE - how tall the sunbeam is
featProp Sunbeam.Costume.scaleY setTo 2.5

// default position for moving across the top
prop Sunbeam.x setTo -400
prop Sunbeam.y setTo -180

// This moves the sunbeam across the screen every second using the direction and speed properties
// that are setup above in the INIT script and then if the sunbeam goes off the edge of the screen
// it comes back on from the other side representing the next day though we don't bother showwing night
# PROGRAM UPDATE
onEvent Tick [[
  exprPush {{ Sunbeam.x + Sunbeam.getProp('direction').value * (Sunbeam.getProp('speed').value); }}
  propPop Sunbeam.x

  ifExpr {{ ((Sunbeam.getProp('direction').value == 1) && (Sunbeam.x > 400)) || ((Sunbeam.getProp('direction').value == -1) && (agent.x < -400)) }} [[
    exprPush {{ 400 * Sunbeam.getProp('direction').value * -1 }}
    propPop Sunbeam.x
  ]]
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is a timer character so that we can see how much time has passed in our model
// We can use that time to think about how long the ecosystem survives if we want 

# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume

// this is a hidden image since the timer is just text 
featProp Timer.Costume.costumeName setTo 'onexone.json'

// this is the time we will track
addProp time number 0

// set the timer to the starting text 
featProp Timer.AgentWidgets.text setTo 'Time: 0'

# PROGRAM UPDATE
// Every second, add one to the time and then update the text on the timer character to say Time: #
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value }}
  featPropPop Timer.AgentWidgets.text 
]]
`
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This character is just a picture of a rock to make it feel a bit more realistic
// and also so that students can think about what happens if fish hide behind the rock

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Rock.Costume.costumeName setTo 'boulder.json'


// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false


// EXPLANATION:
// This is a predator character
// The predator is a consumer that either eats other consumers (carnivore)
// or a mix of consumers and producers such as algae (omnivore)
// You can change the species and art below

# PROGRAM INIT
addFeature Costume
addFeature AgentWidgets
addFeature Movement
addFeature Physics
addFeature Touches

// This label helps us know what kind of creature the predator character is
addProp species string 'otter'

// This sets up the artwork for the predator
featProp Predator.Costume.costumeName setTo 'otter.png'

// This sets up the energyLevel so that it goes between 0 and 100
addProp energyLevel number 50
prop Predator.energyLevel setMax 100
prop Predator.energyLevel setMin 0

// The predator is a consumer, that consumes energy
addProp energyType string 'consumer'

// STUDENTS_MAY_CHANGE
// set to carnivore, omnivore, or herbivore
// this setting determines whether we will eat fish or algae
addProp consumerType string 'carnivore'

addProp health string 'healthy'

featProp Predator.Costume.scale setTo 0.8

// We want to know if the predator touches other characters
// if it touches fish, eat them, trash might make it sick, and it will
// also eat algae if the predator is an omnivore, but not if it is a
// carnivore
featCall Predator.Touches monitor 'Fish' b2b
featCall Predator.Touches monitor 'Trash' b2b
featCall Predator.Touches monitor 'Algae' b2b

// show meter immediately
featProp Predator.AgentWidgets.meterProp setTo 'energyLevel'

// we don't need a text label so set it to be blank
featProp Predator.AgentWidgets.text setTo ''



# PROGRAM UPDATE

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Predator.Movement.compassDirection equal 'E' [[
  featProp Predator.Costume.flipX setTo false
]]
ifFeatProp Predator.Movement.compassDirection equal 'W' [[
  featProp Predator.Costume.flipX setTo true
]]

every 1 runAtStart [[
  // The predator uses energy to be alive and move around
  // so move this down each second
  prop Predator.energyLevel sub 1

  // If the predator has no energy left, it is dead so change how it looks
  // and stop it from interacting with other characters
  ifProp Predator.energyLevel equal 0 [[
    prop Predator.isInert setTo true
    prop Predator.alpha setTo 0.3
  ]]
]]

when Predator touches Algae [[
  every 1 runAtStart [[
    // only consider eating algae if this is an omnivore
    ifProp Predator.consumerType equal 'omnivore' [[

      // only eat the algae if you are healthy or if you are really really hungry (< 50% full)
      ifExpr {{ (Predator.getProp('energyLevel').value < 50) || (Predator.getProp('health').value == 'healthy') }} [[

        // only glow when we are healthy and can eat
        featProp Predator.Costume.glow setTo 1

        // only eat if the algae is above 0
        ifExpr {{ Algae.getProp('energyLevel').value > 0 }} [[
          prop Predator.energyLevel add 10
          prop Algae.energyLevel sub 10
        ]]

        // if the predator ate all the algae make a small version so that we
        // can still see something
        ifExpr {{ Algae.getProp('energyLevel').value <= 0 }} [[
          prop Algae.alpha setTo 0.5
          prop Algae.isInert setTo true
        ]]

      ]]

    ]]
  ]]
]]

when Predator touches Fish [[
  every 1 runAtStart [[
    // Both omnivores and carnivores eat fish

      // only eat the fish if you are healthy or if you are really really hungry (< 50% full)
      ifExpr {{ (Predator.getProp('energyLevel').value < 50) || (Predator.getProp('health').value == 'healthy') }} [[

        // only glow when we are healthy and can eat
        featProp Predator.Costume.glow setTo 1

        // Predator gains some energy
        prop Predator.energyLevel add 20

        // Fish is dead
        prop Fish.isInert setTo true
        prop Fish.alpha setTo 0.3
        // featProp Fish.Costume setPose 2
        prop Fish.energyLevel setTo 0

    ]]
  ]]
]]

when Predator lastTouches Fish [[
  featProp Predator.Costume.glow setTo 0
]]

// If the predator touches the trash, it eats it and get sick
// once it is sick it won't eat as much of other foods 
// see the touches fish and algae to see the difference 
when Predator touches Trash [[
  every 1 runAtStart [[
    // always glow to show the interaction
    featProp Predator.Costume.glow setTo 0.5

    // this is normally set to healthy 
    prop Predator.health setTo 'hurt'
    featCall Predator.Costume setColorizeHSV 0.5 1 0.5
    featCall Trash.Population removeAgent

    // change art
  ]]
]]

when Predator lastTouches Trash [[
  featProp Predator.Costume.glow setTo 0

]]`
    },
    {
      "name": "Trash",
      "scriptText": `# BLUEPRINT Trash
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This character represents trash that was thrown in the water
// If a predator eats it, it is hurt and can't eat as much - see the 
// predator script to see how that works 

# PROGRAM INIT
addFeature Costume
addFeature Population
featProp Trash.Costume.costumeName setTo 'trash.json'

addFeature Physics

featProp Trash.Costume.scale setTo 0.05

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is just a text label for use in the key or somewhere else to display information

# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume

// invisible since we just want the text to show up
featProp TextLabel.Costume.costumeName setTo 'onexone.json'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is just a color square for use in the KEY. See the instance for where the size and color are set 
// (e.g., go to map setup)

# PROGRAM INIT
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'square.json'

addFeature Physics

// required directive
# PROGRAM UPDATE

`
    },
    {
      "name": "GraphAlgaeEnergy",
      "scriptText": `# BLUEPRINT GraphAlgaeEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphAlgaeEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType string 'Algae'
addProp countType string 'avg'
addProp variableToGraph string 'energyLevel'
addProp labelText string 'Algae energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop GraphAlgaeEnergy.characterType setTo 'Algae'
prop GraphAlgaeEnergy.countType setTo 'avg'
prop GraphAlgaeEnergy.variableToGraph setTo 'energyLevel'
prop GraphAlgaeEnergy.labelText setTo 'Algae energyLevel'

addFeature AgentWidgets
addFeature Population
featProp GraphAlgaeEnergy.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue number 0
prop GraphAlgaeEnergy.graphValue setMax 1000
prop GraphAlgaeEnergy.graphValue setMin 0

featCall GraphAlgaeEnergy.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop GraphAlgaeEnergy.x setTo 505
prop GraphAlgaeEnergy.y setTo 230
prop GraphAlgaeEnergy.zIndex setTo 300

exprPush {{ GraphAlgaeEnergy.getProp('characterType').value + ' ' + GraphAlgaeEnergy.getProp('countType').value + ' ' + GraphAlgaeEnergy.getProp('variableToGraph').value }}
propPop GraphAlgaeEnergy.labelText

propPush GraphAlgaeEnergy.labelText
featPropPop GraphAlgaeEnergy.AgentWidgets.text

# PROGRAM UPDATE

onEvent Tick [[

  exprPush {{ GraphAlgaeEnergy.getProp('characterType').value }}
  featPropPop GraphAlgaeEnergy.Population.monitoredAgent

  exprPush {{ GraphAlgaeEnergy.getProp('variableToGraph').value }}
  featPropPop GraphAlgaeEnergy.Population.monitoredAgentProp

  featCall GraphAlgaeEnergy.Population countAgentProp

  exprPush {{ GraphAlgaeEnergy.getFeatProp('Population', GraphAlgaeEnergy.prop.countType.value).value }}
  propPop GraphAlgaeEnergy.graphValue
]]`
    },
    {
      "name": "GraphFishEnergy",
      "scriptText": `# BLUEPRINT GraphFishEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphFishEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType string 'Fish'
addProp countType string 'avg'
addProp variableToGraph string 'energyLevel'
addProp labelText string 'Fish energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop GraphFishEnergy.characterType setTo 'Fish'
prop GraphFishEnergy.countType setTo 'avg'
prop GraphFishEnergy.variableToGraph setTo 'energyLevel'
prop GraphFishEnergy.labelText setTo 'Fish energyLevel'

addFeature AgentWidgets
addFeature Population
featProp GraphFishEnergy.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue number 0
prop GraphFishEnergy.graphValue setMax 1000
prop GraphFishEnergy.graphValue setMin 0

featCall GraphFishEnergy.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop GraphFishEnergy.x setTo 505
prop GraphFishEnergy.y setTo 370
prop GraphFishEnergy.zIndex setTo 300

exprPush {{ GraphFishEnergy.getProp('characterType').value + ' ' + GraphFishEnergy.getProp('countType').value + ' ' + GraphFishEnergy.getProp('variableToGraph').value }}
propPop GraphFishEnergy.labelText
exprPush {{ GraphFishEnergy.getProp('labelText').value }}

featPropPop GraphFishEnergy.AgentWidgets.text

# PROGRAM UPDATE

every 1 runAtStart [[


  exprPush {{ GraphFishEnergy.getProp('characterType').value }}
  featPropPop Population monitoredAgent

  exprPush {{ GraphFishEnergy.getProp('variableToGraph').value }}
  featPropPop Population monitoredAgentProp

  featCall Population countAgentProp

  exprPush {{ GraphFishEnergy.getFeatProp('Population', GraphFishEnergy.prop.countType.value).value }}
  propPop graphValue
  
]]


// required directive
 `
    },
    {
      "name": "HealthMeter",
      "scriptText": `# BLUEPRINT HealthMeter
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is a meter to show the health of the entire ecosystem
// Initialy it only shows fish health, but we want to explore changing this

# PROGRAM INIT
addFeature Population
addFeature AgentWidgets
addFeature Costume


// setup a healthLevel that we will use to make the meter show a level
addProp healthLevel number 100
prop HealthMeter.healthLevel setMin 0
prop HealthMeter.healthLevel setMax 100

// Set the text under the meter to label it
featProp HealthMeter.AgentWidgets.text setTo 'Ecosystem Health'

// Make costume an invisible dot so we only see the meter
featProp HealthMeter.Costume.costumeName setTo 'onexone.json'

// Show meter on start, and make it big
featProp HealthMeter.AgentWidgets.isLargeGraphic setTo true
featProp HealthMeter.AgentWidgets.meterColor setTo 65280

// Set the meter to reflect the health level so that it will update
// whenever the health does
featProp HealthMeter.AgentWidgets.meterProp setTo 'healthLevel'


# PROGRAM UPDATE

onEvent Tick [[

  // Nathan thinks that the fish are the most imporatant thing in the pond
  // So, heck the average fish energyLevel and make that the system health
  featCall HealthMeter.Population countAgentProp 'Fish' 'energyLevel'
  exprPush {{ HealthMeter.getFeatProp('Population', 'avg').value }}
  propPop HealthMeter.healthLevel


  // Set the color of the energy meter depending on the amount of energy that the algae has
  ifProp HealthMeter.healthLevel greaterThanOrEqual 50 [[
    // set the meter to green
    featProp HealthMeter.AgentWidgets.meterColor setTo 65280
  ]]
  ifProp HealthMeter.healthLevel lessThan 50 [[
    // set the meter to orange
    featProp HealthMeter.AgentWidgets.meterColor setTo 16737792
  ]]
  ifProp HealthMeter.healthLevel lessThan 20 [[
    // set the meter to red
    featProp HealthMeter.AgentWidgets.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "Wand1",
      "scriptText": `# BLUEPRINT Wand1
# TAG IsCharControllable true
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This is a wand that stuents can setup to give or take energy or other things
// so that  they can help with the experiment

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

// set up the wand to use this artwork and be a good size
featProp Wand1.Costume.costumeName setTo 'square.json'
featProp Wand1.Costume.scale setTo 0.2

// make sure the wand checks to see if it is touching a fish or algae 
featCall Wand1.Touches monitor 'Fish' b2b
featCall Wand1.Touches monitor 'Algae' b2b

# PROGRAM UPDATE

// do something the first time a wand touches a specific fish 
when Wand1 firsttouches Fish [[
  // make the wand glow so that we know something happened
  featProp Wand1.Costume.glow setTo 1

  // STUDENTS_MAY_CHANGE
  // this currently adds 10 energy to the fish
  // if you change the number it will add more or less energy
  // you can also change the function to sub to subtract if you want 
  prop Fish.energyLevel add 10
]]

// do something the first time a wand touches a specific algae 
when Wand1 firsttouches Algae [[
  // make the wand glow so that we know something happened
  featProp Wand1.Costume.glow setTo 1

  // STUDENTS_MAY_CHANGE
  // this currently adds 10 energy to the algae
  // if you change the number it will add more or less energy
  // you can also change the function to sub to subtract if you want 
  prop Algae.energyLevel add 10
]]

`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background LOAD
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// EXPLANATION:
// This character is just the background image for this model
// You should not need to change it

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'background_aquatic.png'
featProp Background.Costume.scale setTo 1.33
// move this way back so everything else is in front of it
prop Background.zIndex setTo -999

# PROGRAM UPDATE `
    }
  ],
  "instances": [
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 438.53
prop y setTo -407.17
featProp AgentWidgets text setTo 'Energy Key:'`
    },
    {
      "id": "1701",
      "label": "HighLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -370
featProp AgentWidgets text setTo 'High'`
    },
    {
      "id": "1702",
      "label": "MediumLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 456.53
prop y setTo -339.67
featProp AgentWidgets text setTo 'Medium'`
    },
    {
      "id": "1703",
      "label": "LowLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Low'`
    },
    {
      "id": "1704",
      "label": "HighChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -353.04
prop zIndex setTo -100  
featCall agent.Costume setColorize 0 255 0
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1705",
      "label": "MediumChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -319.93
prop zIndex setTo -100
featCall Costume setColorize 210 140 0
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1706",
      "label": "LowChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -287.28
prop zIndex setTo -100
featCall Costume setColorize 255 0 0
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1707",
      "label": "Background1707",
      "bpid": "Background",
      "initScript": `prop x setTo -1.2
prop y setTo -0.2`
    },
    {
      "id": "1710",
      "label": "Algae1710",
      "bpid": "Algae",
      "initScript": `prop x setTo -248.71
prop y setTo -95.88`
    },
    {
      "id": "1711",
      "label": "Algae1711",
      "bpid": "Algae",
      "initScript": `prop x setTo 55.29
prop y setTo -103.3`
    },
    {
      "id": "1712",
      "label": "Sunbeam1712",
      "bpid": "Sunbeam",
      "initScript": `prop x setTo -379.33
prop y setTo -129.71`
    },
    {
      "id": "1713",
      "label": "Rock1713",
      "bpid": "Rock",
      "initScript": `prop x setTo -301.41
prop y setTo 349.49`
    },
    {
      "id": "1714",
      "label": "Rock1714",
      "bpid": "Rock",
      "initScript": `prop x setTo 318.43
prop y setTo 347.53
featProp Rock.Costume.flipX setTo true`
    },
    {
      "id": "1715",
      "label": "Algae1715",
      "bpid": "Algae",
      "initScript": `prop x setTo 29
prop y setTo 30`
    },
    {
      "id": "1716",
      "label": "Algae1716",
      "bpid": "Algae",
      "initScript": `prop x setTo 29
prop y setTo 30`
    },
    {
      "id": "1717",
      "label": "Algae1717",
      "bpid": "Algae",
      "initScript": `prop x setTo -180.87
prop y setTo 0.83`
    },
    {
      "id": "1718",
      "label": "HealthMeter1718",
      "bpid": "HealthMeter",
      "initScript": `prop x setTo 473.14
prop y setTo 228.3`
    },
    {
      "id": "1719",
      "label": "Wand1",
      "bpid": "Wand1",
      "initScript": `prop x setTo 462.46
prop y setTo -203.81
prop zIndex setTo 500`
    }
  ]
}