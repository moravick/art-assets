{
  "id": "aquatic",
  "label": "Aquatic Ecosystems",
  "description": "Tweaks for later runs",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
addFeature Movement
addFeature AgentWidgets
// addFeature Cursor

featProp Fish.Costume.costumeName setTo 'fish.json'

addProp energyLevel Number 30
prop agent.energyLevel setMax 100
prop agent.energyLevel setMin 0

addProp type String 'change'
addProp movementType String 'wander'

// STUDENTS_MAY_CHANGE - set to edgeToEdge or wander - note other options below for speed and direction
prop agent.movementType setTo 'wander'

// STUDENTS_MAY_CHANGE - set as consumer or producer
prop agent.type setTo 'change'

addProp energyUse Number 0

// STUDENTS_MAY_CHANGE - to change how quickly Fish use up energy and get hungry
prop agent.energyUse setTo 3

addProp grows Boolean false

// STUDENTS_MAY_CHANGE - change to 1 (true) turns on the feature that allows the fish to grow if this is 1
prop agent.grows setTo false

addProp startDirection Number 0

addFeature Physics
featProp agent.Costume.scale setTo 1


// set Touches
addFeature Touches
featCall agent.Touches monitor 'Algae' b2b

// show meter immediately
featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'

// set name
exprPush {{ agent.name }}
featPropPop agent.AgentWidgets.text


# PROGRAM UPDATE
onEvent Start [[

  // start at normal size unless you eat
  featProp agent.Costume.scale setTo 1

  // **** OPTIONS TO CHANGE BEHAVIOR ****

  dbgOut 'about to push'
  exprPush {{ agent.getProp('movementType').value == 'wander' }}
  dbgStack

  // if the movementType is wander
  ifExpr {{ agent.getProp('movementType').value == 'wander' }} [[
    featCall agent.Movement setMovementType 'wander' 0.5
    dbgOut 'inside wander'
  ]]

  // if it is edgetoedge
  ifExpr {{ agent.getProp('movementType').value == 'edgeToEdge' }} [[
    featCall agent.Movement setMovementType 'edgeToEdge' 1 0 180
    dbgOut 'inside edgeetoedge'
    exprPush {{ agent.getProp('startDirection').value }}
    featPropPop agent.Movement.direction
  ]]

  dbgOut 'after edgeetoedge'


  // STUDENTS_MAY_CHANGE to make fish move faster when they are automatic
  featProp agent.Movement.distance setTo 2

  // set name + energyLevel
  exprPush {{ agent.name }}
  featPropPop agent.AgentWidgets.text

]]

ifExpr {{ agent.prop.Movement.compassDirection.value === 'E' }} [[
  featProp agent.Costume.flipX setTo false
]]
ifExpr {{ agent.prop.Movement.compassDirection.value === 'W' }} [[
  featProp agent.Costume.flipX setTo true
]]

when Fish touches Algae [[
  every 1 runAtStart [[
    // always glow to show the interaction
    ifExpr {{ Fish.getProp('isInert').value != true }} [[
      featProp Fish.Costume.glow setTo 4
    ]]

    // only eat if the algae is above 0
    ifExpr {{ Algae.getProp('energyLevel').value > 0 }} [[
      prop Fish.energyLevel add 10
      prop Algae.energyLevel sub 10
    ]]

    // grow if above 90% energy
    ifExpr {{ (Fish.getProp('grows').value) && (Fish.getProp('energyLevel').value > 90) }} [[

      // STUDENTS_MAY_CHANGE - this is the logic that makes large fish use more energy, so changing the energyUse in here is something we might want to do
      featProp Fish.Costume.scale setTo 2
      prop Fish.energyUse setTo 2
    ]]

    ifExpr {{ Algae.getProp('energyLevel').value <= 0 }} [[
      prop Algae.alpha setTo 0.3
      prop Algae.isInert setTo true
    ]]

  ]]
]]

when Fish lastTouches Algae [[
  featProp Fish.Costume.glow setTo 0
]]


every 1 runAtStart [[
  // foodLevel goes down every n seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value }}
  propPop agent.energyLevel

  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featProp Fish.Costume.currentFrame setTo 0
    // Green
    featProp agent.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featProp Fish.Costume.currentFrame setTo 1
    // Orange
    featProp agent.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featProp Fish.Costume.currentFrame setTo 1
    // Red
    featProp agent.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    featProp Fish.Costume.currentFrame setTo 2
    featCall agent.Movement setMovementType 'float'
    prop agent.alpha setTo 0.3
    prop agent.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Fish.AgentWidgets.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT

// required directive`
    },
    {
      "name": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT

addFeature Costume
addFeature Movement
addFeature Population
addFeature AgentWidgets

// STUDENTS_MAY_CHANGE - set as consumer or producer
addProp type String 'change'
prop agent.type setTo 'change'

// default to false but once turned on (true) algae will reproduce if they get to full energy from the sun (so any that start at full won't spawn)
addProp spawns Boolean false

// STUDENTS_MAY_CHANGE - if we want to see what happens when algae reproduce
prop agent.spawns setTo false

featProp agent.Costume.costumeName setTo 'algae.json'

// show meter immediately
featProp Algae.AgentWidgets.meterProp setTo 'energyLevel'


// setup energyLevel variablee
addProp energyLevel Number 100
prop agent.energyLevel setMax 100
prop agent.energyLevel setMin 0

// set algae energy meter color for start
ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
  featProp agent.AgentWidgets.meterColor setTo 62850
]]
ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
  featProp agent.AgentWidgets.meterColor setTo 16737792
]]
ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
  featProp agent.AgentWidgets.meterColor setTo 16711680
]]

addProp energyUse Number 0

// STUDENTS_MAY_CHANGE - this makes the algae lose energy over time (by default they do not)
prop agent.energyUse setTo 0

addFeature Physics

addFeature Touches
featCall agent.Touches monitor 'Fish' b2b
featCall agent.Touches monitor 'Sunbeam' b2b

featProp Algae.AgentWidgets.text setTo ''

// STUDENTS_MAY_CHANGE - to set the type of movement and / or the amount it will wander
featProp agent.Movement.movementType setTo 'wander'
featProp agent.Movement.distance setTo 0.2

exprPush {{ (agent.getProp('energyLevel').value / 100)* 3 }}
featPropPop Algae.Costume.scale

prop agent.zIndex setTo -110

# PROGRAM UPDATE
when Algae touches Sunbeam [[
  every 1 runAfter [[
    featProp Algae.Costume.glow setTo 4
    exprPush {{ Algae.getProp('energyLevel').value + Sunbeam.getProp('energyRate').value }}
    propPop Algae.energyLevel

    // if Spawning is active, create more algae when we hit 100
    ifExpr {{ agent.getProp('spawns').value }} [[
      // Only spawn more if we are under 200 total ... to avoid crashing the system
      ifExpr {{ Algae.callFeatMethod('Population', 'getActiveAgentsCount', 'Algae') < 200 }} [[
        ifExpr {{ agent.getProp('energyLevel').value == 100 }} [[
          prop Algae.energyLevel sub 50
          featCall Algae.Population createAgent Algae [[
            // STUDENTS_MAY_CHANGE - maybe change the new energy level (currently 40) or the threshold (from 100) or the new position or other things
            prop Algae.energyLevel setTo 40
            prop Algae.x add 25
            prop Algae.y add 25
          ]]
        ]]
      ]]
    ]]
  ]]
]]

when Algae lastTouches Sunbeam [[
  featProp Algae.Costume.glow setTo 0
]]

every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ agent.getProp('energyLevel').value > 0 }} [[
    exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value }}
    propPop agent.energyLevel
  ]]

  // re-scale the algae based on its energy level
  exprPush {{ (agent.getProp('energyLevel').value / 100)* 3 }}
  featPropPop agent.Costume.scale

  // set algae energy meter color
  // doing great
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    // Green
    featProp agent.AgentWidgets.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    // Orange
    featProp agent.AgentWidgets.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    // Red
    featProp agent.AgentWidgets.meterColor setTo 16711680
  ]]


]]`
    },
    {
      "name": "Sunbeam",
      "scriptText": `# BLUEPRINT Sunbeam
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'circle.json'
featCall agent.Costume setColorize 1 1 0
prop agent.alpha setTo 0.3
prop agent.zIndex setTo 100

addProp speed Number 20
// STUDENTS_MAY_CHANGE - to set the speed of the sunbeam
prop agent.speed setTo 20

addProp energyRate Number 5
// STUDENTS_MAY_CHANGE - to set the amount of energy the sunbeam gives to algae
prop agent.energyRate setTo 5

addProp direction Number 1
// STUDENTS_MAY_CHANGE - to set which direction the sunbeam moves (right: 1, left: -1)
prop agent.direction setTo 1

addFeature Physics
// STUDENTS_MAY_CHANGE - how wide the sunbeam is
featProp agent.Costume.scale setTo 0.4
// STUDENTS_MAY_CHANGE - how tall the sunbeam is
featProp agent.Costume.scaleY setTo 2.5

addFeature Touches

// default position for moving across the top
prop agent.x setTo -400
prop agent.y setTo -180

# PROGRAM UPDATE
onEvent Tick [[
  exprPush {{ agent.x + agent.getProp('direction').value * (agent.getProp('speed').value); }}
  propPop agent.x

  ifExpr {{ ((agent.getProp('direction').value == 1) && (agent.x > 400)) || ((agent.getProp('direction').value == -1) && (agent.x < -400)) }} [[
    exprPush {{ 400 * agent.getProp('direction').value * -1 }}
    propPop agent.x
  ]]
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json'

addProp time Number 0

featProp agent.AgentWidgets.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop agent.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop agent.AgentWidgets.text 
]]
 `
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature Costume

featProp agent.Costume.costumeName setTo 'boulder.json'

addFeature Physics

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Turtle",
      "scriptText": `# BLUEPRINT Turtle
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
addFeature AgentWidgets
addFeature Movement

// temp until we get new art
featProp agent.Costume.costumeName setTo 'turtle_sprites.json'

addProp energyLevel Number 50
prop agent.energyLevel setMax 100
prop agent.energyLevel setMin 0

addProp energyUse Number 1

addProp health String 'healthy'

// STUDENTS_MAY_CHANGE - to change how quickly turtle use up energy and get hungry
prop agent.energyUse setTo 1

addFeature Physics

featProp agent.Costume.scale setTo 0.15

// set Touches
addFeature Touches
featCall agent.Touches monitor 'Fish' b2b
featCall agent.Touches monitor 'Trash' b2b

// show meter immediately
featProp Turtle.AgentWidgets.meterProp setTo 'energyLevel'

featProp agent.AgentWidgets.text setTo ''

# PROGRAM UPDATE

ifExpr {{ agent.prop.Movement.compassDirection.value === 'E' }} [[
  featProp agent.Costume.flipX setTo false
]]
ifExpr {{ agent.prop.Movement.compassDirection.value === 'W' }} [[
  featProp agent.Costume.flipX setTo true
]]

every 1 runAtStart [[
  // foodLevel goes down every n seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value }}
  propPop agent.energyLevel

  ifExpr {{ agent.getProp('energyLevel').value == 0 }} [[
    prop agent.isInert setTo true
    prop agent.alpha setTo 0.3
  ]]
]]

when Turtle touches Fish [[
  every 1 runAtStart [[

    // only eat the fish if you are under 50% full or healthy
    ifExpr {{ (Turtle.getProp('energyLevel').value < 50) || (Turtle.getProp('health').value == 'healthy') }} [[

      // only glow when we are healthy and can eat
      featProp agent.Costume.glow setTo 1

      // Turtle gains some energy
      prop Turtle.energyLevel add 20

      // Fish is dead
      prop Fish.isInert setTo true
      prop Fish.alpha setTo 0.3
      featProp Fish.Costume setPose 2
      prop Fish.energyLevel setTo 0
    ]]

  ]]
]]

when Turtle lastTouches Fish [[
  featProp agent.Costume.glow setTo 0
]]

when Turtle touches Trash [[
  every 1 runAtStart [[
    // always glow to show the interaction
    featProp agent.Costume.glow setTo 0.5

    prop agent.health setTo 'hurt'
    featProp agent.Costume setColorizeHSV 0.5 1 0.5
    featCall Trash.Population removeAgent

    // change art
  ]]
]]

when Turtle lastTouches Trash [[
  featProp agent.Costume.glow setTo 0

]]`
    },
    {
      "name": "Trash",
      "scriptText": `# BLUEPRINT Trash
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Population
featProp agent.Costume.costumeName setTo 'trash.json'

addFeature Physics

featProp agent.Costume.scale setTo 0.05

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'square.json'

addFeature Physics

// required directive
# PROGRAM UPDATE

// required directive
 

// required directive
# PROGRAM EVENT`
    },
    {
      "name": "MeterAlgaeEnergy",
      "scriptText": `# BLUEPRINT MeterAlgaeEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addProp reportSubject String 'Algae'
addProp energyLevel Number 100

addFeature Population
addFeature AgentWidgets

// setup the meter title
exprPush {{ 'Algae avg energy' }}
featPropPop agent.AgentWidgets.text

// Make costume an invisible dot
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json'

// Show meter on start.
featProp agent.AgentWidgets.isLargeGraphic setTo true
featProp agent.AgentWidgets.meterColor setTo 65280
// set to 1 so we can see something at start
// I tried binding and it wasn't working so sticking with this hack for now
featProp MeterAlgaeEnergy.AgentWidgets.meterProp setTo 1

// default placement for the algae meter
prop agent.x setTo 505
prop agent.y setTo 320
prop agent.alpha setTo 0.3

# PROGRAM UPDATE

onEvent Tick [[

  // Algae meter display
  featCall agent.Population countAgentProp 'Algae' 'energyLevel'
  exprPush {{ agent.getFeatProp('Population', 'avg').value }}
  propPop agent.energyLevel

  exprPush {{ agent.getFeatProp('Population', 'avg').value / 100 }}
  featPropPop agent.AgentWidgets.meter

  exprPush {{ agent.getProp('reportSubject').value + ' avg: ' + agent.getProp('energyLevel').value }}
  featPropPop agent.AgentWidgets.text

  // set meter color for average energy
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featProp agent.AgentWidgets.meterColor setTo 62580
  ]]
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featProp agent.AgentWidgets.meterColor setTo 16737792
  ]]
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featProp agent.AgentWidgets.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "MeterFishEnergy",
      "scriptText": `# BLUEPRINT MeterFishEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addProp reportSubject String 'Fish'
addProp energyLevel Number 100

addFeature Population
addFeature AgentWidgets

// setup the meter title
exprPush {{ 'Fish avg energy' }}
featPropPop agent.AgentWidgets.text

// Make costume an invisible dot
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json'

// Show meter on start.
featProp agent.AgentWidgets.isLargeGraphic setTo true
featProp agent.AgentWidgets.meterColor setTo 65280
// set to 1 so we can see something at start
// I tried binding and it wasn't working so sticking with this hack for now
featProp agent.AgentWidgets.meterProp setTo 1


// default placement for the fish meter
prop agent.x setTo 505
prop agent.y setTo 320
prop agent.alpha setTo 0.3

# PROGRAM UPDATE

onEvent Tick [[

  // Fish meter display
  featCall agent.Population countAgentProp 'Fish' 'energyLevel'
  exprPush {{ agent.getFeatProp('Population', 'avg').value }}
  propPop agent.energyLevel

  exprPush {{ agent.getFeatProp('Population', 'avg').value / 100 }}
  featPropPop agent.AgentWidgets.meter

  exprPush {{ agent.getProp('reportSubject').value + ' avg: ' + agent.getProp('energyLevel').value }}
  featPropPop agent.AgentWidgets.text

  // set meter color for average energy
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featProp agent.AgentWidgets.meterColor setTo 65280
  ]]
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featProp agent.AgentWidgets.meterColor setTo 16737792
  ]]
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featProp agent.AgentWidgets.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "GraphAlgaeEnergy",
      "scriptText": `# BLUEPRINT GraphAlgaeEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphAlgaeEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType String 'Algae'
addProp countType String 'avg'
addProp variableToGraph String 'energyLevel'
addProp labelText String 'Algae energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop agent.characterType setTo 'Algae'
prop agent.countType setTo 'avg'
prop agent.variableToGraph setTo 'energyLevel'
prop agent.labelText setTo 'Algae energyLevel'

addFeature AgentWidgets
addFeature Population
featProp agent.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue Number 0
prop agent.graphValue setMax 1000
prop agent.graphValue setMin 0

featCall agent.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop agent.x setTo 505
prop agent.y setTo 230
prop agent.zIndex setTo 300

exprPush {{ agent.getProp('characterType').value + ' ' + agent.getProp('countType').value + ' ' + agent.getProp('variableToGraph').value }}
propPop agent.labelText

exprPush {{ agent.getProp('labelText').value }}
featPropPop agent.AgentWidgets.text text

# PROGRAM UPDATE

onEvent Tick [[

  exprPush {{ agent.getProp('characterType').value }}
  featPropPop agent.Population.monitoredAgent

  exprPush {{ agent.getProp('variableToGraph').value }}
  featPropPop agent.Population.monitoredAgentProp

  featCall agent.Population countAgentProp

  exprPush {{ agent.getFeatProp('Population', agent.prop.countType.value).value }}
  propPop agent.graphValue
]]`
    },
    {
      "name": "GraphFishEnergy",
      "scriptText": `# BLUEPRINT GraphFishEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphFishEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType String 'Fish'
addProp countType String 'avg'
addProp variableToGraph String 'energyLevel'
addProp labelText String 'Fish energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop agent.characterType setTo 'Fish'
prop agent.countType setTo 'avg'
prop agent.variableToGraph setTo 'energyLevel'
prop agent.labelText setTo 'Fish energyLevel'

addFeature AgentWidgets
addFeature Population
featProp agent.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue Number 0
prop agent.graphValue setMax 1000
prop agent.graphValue setMin 0

featCall agent.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop agent.x setTo 505
prop agent.y setTo 370
prop agent.zIndex setTo 300

exprPush {{ agent.getProp('characterType').value + ' ' + agent.getProp('countType').value + ' ' + agent.getProp('variableToGraph').value }}
propPop agent.labelText
exprPush {{ agent.getProp('labelText').value }}

featPropPop agent.AgentWidgets.text

# PROGRAM UPDATE

every 1 runAtStart [[


  exprPush {{ agent.getProp('characterType').value }}
  featPropPop Population monitoredAgent

  exprPush {{ agent.getProp('variableToGraph').value }}
  featPropPop Population monitoredAgentProp

  featCall Population countAgentProp

  exprPush {{ agent.getFeatProp('Population', agent.prop.countType.value).value }}
  propPop graphValue
  
]]


// required directive
 `
    }
  ],
  "instances": [
    {
      "id": "501",
      "label": "Algae 1",
      "bpid": "Algae",
      "initScript": `prop x setTo 300`
    },
    {
      "id": "503",
      "label": "Algae 3",
      "bpid": "Algae",
      "initScript": `prop x setTo -184.37`
    },
    {
      "id": "504",
      "label": "Algae 4",
      "bpid": "Algae",
      "initScript": `prop x setTo -295.58`
    },
    {
      "id": "505",
      "label": "Algae 5",
      "bpid": "Algae",
      "initScript": `prop x setTo 170.99`
    },
    {
      "id": "521",
      "label": "Rock1",
      "bpid": "Rock",
      "initScript": `prop x setTo -350
prop y setTo 368
featProp agent.Costume.scale setTo 1.3
prop agent.zIndex setTo 210`
    },
    {
      "id": "522",
      "label": "Rock2",
      "bpid": "Rock",
      "initScript": `prop x setTo 339.19
prop y setTo 387.94
featProp Costume flipX setTo true
prop agent.zIndex setTo 210`
    },
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop agent.y setTo -400
featProp AgentWidgets text setTo 'Energy Key:'`
    },
    {
      "id": "1701",
      "label": "HighLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -370
featProp AgentWidgets text setTo 'High'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "MediumLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -339.64
featProp AgentWidgets text setTo 'Medium'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "LowLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Low'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "HighChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -337.79
featCall agent.Costume setColorize 0 255 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100
`
    },
    {
      "id": "1705",
      "label": "MediumChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -307.35
featCall Costume setColorize 210 140 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1706",
      "label": "LowChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -275.80
featCall Costume setColorize 255 0 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1707",
      "label": "Sunbeam",
      "bpid": "Sunbeam",
      "initScript": `prop x setTo -404.2
prop y setTo -196.34
prop energyRate setTo 50
prop direction setTo 1
prop speed setTo 20
prop agent.zIndex setTo 0`
    },
    {
      "id": "1708",
      "label": "Algae1708",
      "bpid": "Algae",
      "initScript": `prop x setTo -22
prop y setTo 42`
    },
    {
      "id": "1709",
      "label": "Algae1709",
      "bpid": "Algae",
      "initScript": `prop x setTo 183.9
prop y setTo -132.81`
    },
    {
      "id": "1710",
      "label": "Algae1710",
      "bpid": "Algae",
      "initScript": `prop x setTo -281.54
prop y setTo -68.22`
    }
  ]
}