{
  "id": "carnivorousplants_foodweb_energy",
  "label": "Food Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 255255204,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model involves learners repreesenting the energy flow in the system (need to add more here)

prop global.visible setTo false

addProp energyReleasedAsHeat number 0

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Explanation",
      "scriptText": `# BLUEPRINT Explanation
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// ----------------------------------------------------------------------------------------------------------------
// This charaacter is meaant to explain the rest of the scripts, and is not meant to be added to the stage
// ---------------------------------------------------------------------------------------------------------------- 

// The goal of this model is to let students explore the energy in the foodweb system by being a 
// representaiton of that energy rather than a character. Therefore they will be the EenergyRepresentation
// character using either pozyx or charController 

// The system is intended to mirror the foodweb model in that energy is meant to go from the sun to (add description). 
// To help movivate the students, the algae and fish lose energy over time, so they will die if the users don't 
// hurry and give it to them

// The main chaaracter is therefore the EnergyRepresentation, which stuents can use to look around. As they touch
// an energy source, they will pick up / become that kind of energy
// So, a key thing to look at for is how the EnergyRepresentation character changes it's energyType as it moves around 

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json' 0
featProp agent.Costume.scale setTo 1

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
// The sun is one of the characters that produces energy
// Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// simple, and just needs the variables for the EnergyRepresentation to read


addFeature Costume
featProp Sun.Costume.costumeName setTo 'circle.json'
// Instead of sun art, we are using a generic circle, so the next line tints it yellow
featCall Sun.Costume setColorize 255 215 0
// This makess sure the sunu is behind everything else
prop Sun.zIndex setTo 0


addFeature Physics
featProp Sun.Costume.scale setTo 1

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType string 'sun'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
// Note: this character doesn't do anyhting - it is just for show since there is no
// other easy way to add background art
addFeature Costume
featProp Sky.Costume.costumeName setTo 'FWE_background (Yellow filter).png'
// featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featProp Sky.Costume.width setTo 800
featProp Sky.Costume.height setTo 800

// make sure this is always way in the back behind all
// of the other characters
prop Sky.zIndex setTo -100


// required directive
# PROGRAM INIT`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
addProp time number 0
prop Timer.zIndex setTo 500

featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM DEFINE
// This is a graph of energy lost to heat from all charaacters
// since there are lots of characters, rather than sume them up one type
// at a time, use a global variabe to track that excess heat

// hide the actual art since we just want the text to displaay
addFeature Costume
featProp GraphLostEnergy.Costume.costumeName setTo 'GEN_onexone.json'
featProp GraphLostEnergy.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp GraphLostEnergy.Graphing.isLargeGraphic setTo true


// using a generic name so that it is easier to change later
addProp lostEnergy number 500
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

featProp GraphLostEnergy.Graphing.graphProp setTo 'lostEnergy'

// make sure something displays with some initial text, on bottom right at first
prop GraphLostEnergy.x setTo 495
prop GraphLostEnergy.y setTo 350
prop GraphLostEnergy.zIndex setTo 300

featProp GraphLostEnergy.Graphing.text setTo 'Lost Energy'

# PROGRAM UPDATE

onEvent Tick [[

  // exprPush {{ global.getProp('energyReleasedAsHeat').value }}
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "EnergyInSystem",
      "scriptText": `# BLUEPRINT EnergyInSystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM DEFINE
// hide the actual art since we just want the text to displaay
addFeature Costume
featProp EnergyInSystem.Costume.costumeName setTo 'onexone.json'
featProp EnergyInSystem.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp EnergyInSystem.Graphing.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy Number 500
prop EnergyInSystem.totalEnergy setMax 1000
prop EnergyInSystem.totalEnergy setMin 0

// to store the current values of all animals and vaggies separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalVeggieGardenEnergy Number 0
addProp totalCloverEnergy Number 0
addProp totalGopherEnergy Number 0
addProp totalRobinEnergy Number 0
addProp totalCaterpillarEnergy Number 0
addProp totalMouseEnergy Number 0
addProp totalSnailEnergy Number 0
addProp totalBeetleEnergy Number 0
addProp totalHawkEnergy Number 0
addProp totaSnakeEnergy Number 0


featProp EnergyInSystem.Graphing.graphProp setTo 'totalEnergy'

# PROGRAM UPDATE

onEvent Tick [[

  // count up the VaggieGarden
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'VeggieGarden'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'VeggieGarden' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalVeggieGardenEnergy

  // count up the Clover
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Clover'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Clover' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCloverEnergy

  // count up the Gopher
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Gopher'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Gopher' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalGopherEnergy

  // count up the Robin
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Robin'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Robin' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalRobinEnergy

  // count up the Caterpillar
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Caterpillar'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Caterpillar' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCaterpillarEnergy

  // count up the Mouse
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Mouse'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Mouse' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalMouseEnergy

  // count up the Snail
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Snail'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Snail' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalSnailEnergy

  // count up the Beetle
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Beetle'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Beetle' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalBeetleEnergy

  // count up the Hawk
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Hawk'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Hawk' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalHawkEnergy

  // count up the Snake
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Snake'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Snake' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totaSnakeEnergy

  // graph the sum
  exprPush {{ EnergyInSystem.getProp('totalVeggieGardenEnergy').value + agent.getProp('totalCloverEnergy').value + agent.getProp('totalGopherEnergy').value + agent.getProp('totalRobinEnergy').value + agent.getProp('totalCaterpillarEnergy').value + agent.getProp('totalMouseEnergy').value + agent.getProp('totalSnailEnergy').value + agent.getProp('totalBeetleEnergy').value + agent.getProp('totalHawkEnergy').value + agent.getProp('totaSnakeEnergy').value }}
  propPop EnergyInSystem.totalEnergy


]]

// required directive
# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop EnergyInSystem.x setTo 495
prop EnergyInSystem.y setTo 187
prop EnergyInSystem.zIndex setTo 300

featProp EnergyInSystem.Graphing.text setTo 'Energy in System'
`
    },
    {
      "name": "VeggieGarden",
      "scriptText": `# BLUEPRINT VeggieGarden
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The VeggieGarden is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp VeggieGarden.Costume.costumeName setTo 'FWE_veggiegarden.png'

addFeature Physics
featProp VeggieGarden.Costume.scale setTo 0.4

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'vaggieGarden'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop VeggieGarden.energyLevel setMax 100
prop VeggieGarden.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp VeggieGarden.Graphing.meterProp setTo 'energyLevel'

featProp VeggieGarden.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 0 }} [[
    exprPush {{ VeggieGarden.getProp('energyLevel').value - VeggieGarden.getProp('energyUse').value }}
    propPop VeggieGarden.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 30 }} [[
    exprPush {{ VeggieGarden.getProp('energyLevel').value / 100 }}
    featPropPop VeggieGarden.Costume.scale
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp VeggieGarden.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp VeggieGarden.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp VeggieGarden.Graphing.meterColor setTo 16711680


    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop VeggieGarden.Costume.scale

  ]]
]]`
    },
    {
      "name": "Clover",
      "scriptText": `# BLUEPRINT Clover
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Clover is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Clover.Costume.costumeName setTo 'FWE_clover.png'

addFeature Physics
featProp Clover.Costume.scale setTo 0.15

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'clover'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Clover.energyLevel setMax 100
prop Clover.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Clover.Graphing.meterProp setTo 'energyLevel'

featProp Clover.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Clover.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Clover.getProp('energyLevel').value - Clover.getProp('energyUse').value }}
    propPop Clover.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Clover.getProp('energyLevel').value > 30 }} [[
    // insert code here
  ]]
  exprPush {{ Clover.getProp('energyLevel').value / 200 }}
  featPropPop Clover.Costume.scale

  // this code sets the color of the energy bar based on how hungry the clover is
  // set clover energy meter color
  // doing great
  ifExpr {{ Clover.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Clover.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Clover.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Clover.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Clover.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Clover.Graphing.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Clover.Costume.scale

  ]]
]]`
    },
    {
      "name": "Gopher",
      "scriptText": `# BLUEPRINT Gopher
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Gopher is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Gopher.Costume.costumeName setTo 'FWE_gopher.png'

addFeature Physics
featProp Gopher.Costume.scale setTo 0.15

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'gopher'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Gopher.energyLevel setMax 100
prop Gopher.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Gopher lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Gopher.Graphing.meterProp setTo 'energyLevel'

featProp Gopher.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Gopher.getProp('energyLevel').value - Gopher.getProp('energyUse').value }}
  propPop Gopher.energyLevel

  // this code sets the color of the energy bar based on how hungry the Gopher is
  // sated
  ifExpr {{ Gopher.getProp('energyLevel').value > 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 0
    // Green
    featProp Gopher.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Gopher.getProp('energyLevel').value < 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Orange
    featProp Gopher.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Gopher.getProp('energyLevel').value < 20 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Red
    featProp Gopher.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Gopher.getProp('energyLevel').value < 1 }} [[
    featProp Gopher.Costume.currentFrame setTo 2
    prop Gopher.alpha setTo 0.3
    prop Gopher.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Gopher.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Snail",
      "scriptText": `# BLUEPRINT Snail
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Snail is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Snail.Costume.costumeName setTo 'FWE_snail.png'

addFeature Physics
featProp Snail.Costume.scale setTo 0.35

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'snail'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snail.energyLevel setMax 100
prop Snail.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snail lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snail.Graphing.meterProp setTo 'energyLevel'

featProp Snail.Graphing.meterColor setTo 65280


# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snail.getProp('energyLevel').value - Snail.getProp('energyUse').value }}
  propPop Snail.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snail is
  // sated
  ifExpr {{ Snail.getProp('energyLevel').value > 50 }} [[
    featProp Snail.Costume.currentFrame setTo 0
    // Green
    featProp Snail.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snail.getProp('energyLevel').value < 50 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Orange
    featProp Snail.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snail.getProp('energyLevel').value < 20 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Red
    featProp Snail.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snail.getProp('energyLevel').value < 1 }} [[
    featProp Snail.Costume.currentFrame setTo 2
    prop Snail.alpha setTo 0.3
    prop Snail.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Snail.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Caterpillar",
      "scriptText": `# BLUEPRINT Caterpillar
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Caterpillar is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Caterpillar.Costume.costumeName setTo 'FWE_caterpillar.png'

addFeature Physics
featProp Caterpillar.Costume.scale setTo 0.15

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'caterpillar'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Caterpillar.energyLevel setMax 100
prop Caterpillar.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Caterpillar lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

featProp Caterpillar.Graphing.meterColor setTo 65280


# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Caterpillar.getProp('energyLevel').value - Caterpillar.getProp('energyUse').value }}
  propPop Caterpillar.energyLevel

  // this code sets the color of the energy bar based on how hungry the Caterpillar is
  // sated
  ifExpr {{ Caterpillar.getProp('energyLevel').value > 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 0
    // Green
    featProp Caterpillar.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Orange
    featProp Caterpillar.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 20 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Red
    featProp Caterpillar.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 1 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 2
    prop Caterpillar.alpha setTo 0.3
    prop Caterpillar.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Beetle",
      "scriptText": `# BLUEPRINT Beetle
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Beetle is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Beetle.Costume.costumeName setTo 'FWE_beetle.png'

addFeature Physics
featProp Beetle.Costume.scale setTo 0.35

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'beetle'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Beetle.energyLevel setMax 100
prop Beetle.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Beetle lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Beetle.Graphing.meterProp setTo 'energyLevel'

featProp Beetle.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Beetle.getProp('energyLevel').value - Beetle.getProp('energyUse').value }}
  propPop Beetle.energyLevel

  // this code sets the color of the energy bar based on how hungry the Beetle is
  // sated
  ifExpr {{ Beetle.getProp('energyLevel').value > 50 }} [[
    featProp Beetle.Costume.currentFrame setTo 0
    // Green
    featProp Beetle.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Beetle.getProp('energyLevel').value < 50 }} [[
    featProp Beetle.Costume.currentFrame setTo 1
    // Orange
    featProp Beetle.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Beetle.getProp('energyLevel').value < 20 }} [[
    featProp Beetle.Costume.currentFrame setTo 1
    // Red
    featProp Beetle.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Beetle.getProp('energyLevel').value < 1 }} [[
    featProp Beetle.Costume.currentFrame setTo 2
    prop Beetle.alpha setTo 0.3
    prop Beetle.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Beetle.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Mouse",
      "scriptText": `# BLUEPRINT Mouse
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Mouse is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Mouse.Costume.costumeName setTo 'FWE_mouse.png'

addFeature Physics
featProp Mouse.Costume.scale setTo 0.35

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'mouse'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Mouse.energyLevel setMax 100
prop Mouse.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Mouse lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Mouse.Graphing.meterProp setTo 'energyLevel'

featProp Mouse.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Mouse.getProp('energyLevel').value - Mouse.getProp('energyUse').value }}
  propPop Mouse.energyLevel

  // this code sets the color of the energy bar based on how hungry the Mouse is
  // sated
  ifExpr {{ Mouse.getProp('energyLevel').value > 50 }} [[
    featProp Mouse.Costume.currentFrame setTo 0
    // Green
    featProp Mouse.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Mouse.getProp('energyLevel').value < 50 }} [[
    featProp Mouse.Costume.currentFrame setTo 1
    // Orange
    featProp Mouse.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Mouse.getProp('energyLevel').value < 20 }} [[
    featProp Mouse.Costume.currentFrame setTo 1
    // Red
    featProp Mouse.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Mouse.getProp('energyLevel').value < 1 }} [[
    featProp Mouse.Costume.currentFrame setTo 2
    prop Mouse.alpha setTo 0.3
    prop Mouse.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Mouse.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Robin",
      "scriptText": `# BLUEPRINT Robin
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Robin is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Robin.Costume.costumeName setTo 'FWE_robin.png'

addFeature Physics
featProp Robin.Costume.scale setTo 0.15

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'robin'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Robin.energyLevel setMax 100
prop Robin.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Robin lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Robin.Graphing.meterProp setTo 'energyLevel'

featProp Robin.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Robin.getProp('energyLevel').value - Robin.getProp('energyUse').value }}
  propPop Robin.energyLevel

  // this code sets the color of the energy bar based on how hungry the Robin is
  // sated
  ifExpr {{ Robin.getProp('energyLevel').value > 50 }} [[
    featProp Robin.Costume.currentFrame setTo 0
    // Green
    featProp Robin.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Robin.getProp('energyLevel').value < 50 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Orange
    featProp Robin.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Robin.getProp('energyLevel').value < 20 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Red
    featProp Robin.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Robin.getProp('energyLevel').value < 1 }} [[
    featProp Robin.Costume.currentFrame setTo 2
    prop Robin.alpha setTo 0.3
    prop Robin.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Robin.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Hawk",
      "scriptText": `# BLUEPRINT Hawk
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Hawk is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Hawk.Costume.costumeName setTo 'FWE_Hawk.png'

addFeature Physics
featProp Hawk.Costume.scale setTo 0.07

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'hawk'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Hawk.energyLevel setMax 100
prop Hawk.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Hawk lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Hawk.Graphing.meterProp setTo 'energyLevel'

featProp Hawk.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Hawk.getProp('energyLevel').value - Hawk.getProp('energyUse').value }}
  propPop Hawk.energyLevel

  // this code sets the color of the energy bar based on how hungry the Hawk is
  // sated
  ifExpr {{ Hawk.getProp('energyLevel').value > 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 0
    // Green
    featProp Hawk.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Hawk.getProp('energyLevel').value < 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Orange
    featProp Hawk.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Hawk.getProp('energyLevel').value < 20 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Red
    featProp Hawk.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Hawk.getProp('energyLevel').value < 1 }} [[
    featProp Hawk.Costume.currentFrame setTo 2
    prop Hawk.alpha setTo 0.3
    prop Hawk.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Hawk.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Grass",
      "scriptText": `# BLUEPRINT Grass
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Grass is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Grass.Costume.costumeName setTo 'CP_grass.png'

addFeature Physics
featProp Grass.Costume.scale setTo 0.4

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'Grass'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Grass.energyLevel setMax 100
prop Grass.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Grass.Graphing.meterProp setTo 'energyLevel'

featProp Grass.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Grass.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Grass.getProp('energyLevel').value - Grass.getProp('energyUse').value }}
    propPop Grass.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Grass.getProp('energyLevel').value > 30 }} [[
    exprPush {{ Grass.getProp('energyLevel').value / 100 }}
    featPropPop Grass.Costume.scale
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifExpr {{ Grass.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Grass.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Grass.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Grass.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Grass.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Grass.Graphing.meterColor setTo 16711680


    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop Grass.Costume.scale

  ]]
]]`
    },
    {
      "name": "Squash",
      "scriptText": `# BLUEPRINT Squash
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Squash is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Squash.Costume.costumeName setTo 'CP_squash.png'

addFeature Physics
featProp Squash.Costume.scale setTo 0.4

// types to use for energy transfer:
// these are referenced by EnergyRepresentation
addProp energyType String 'squash'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Squash.energyLevel setMax 100
prop Squash.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Squash.Graphing.meterProp setTo 'energyLevel'

featProp Squash.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Squash.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Squash.getProp('energyLevel').value - Squash.getProp('energyUse').value }}
    propPop Squash.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Squash.getProp('energyLevel').value > 30 }} [[
    // insert code here
  ]]
  exprPush {{ Squash.getProp('energyLevel').value / 200 }}
  featPropPop Squash.Costume.scale

  // this code sets the color of the energy bar based on how hungry the squash is
  // set squash energy meter color
  // doing great
  ifExpr {{ Squash.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Squash.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Squash.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Squash.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Squash.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Squash.Graphing.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Squash.Costume.scale

  ]]
]]`
    },
    {
      "name": "Venusflytrap",
      "scriptText": `# BLUEPRINT Venusflytrap
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Venusflytrap is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Venusflytrap.Costume.costumeName setTo 'CP_venusflytrap.png'

addFeature Physics
featProp Venusflytrap.Costume.scale setTo 0.4

// types to use for energy transfer:
addProp energyType String 'venusflytrap'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Venusflytrap.energyLevel setMax 100
prop Venusflytrap.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Venusflytrap.Graphing.meterProp setTo 'energyLevel'

featProp Venusflytrap.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Venusflytrap.getProp('energyLevel').value - Venusflytrap.getProp('energyUse').value }}
    propPop Venusflytrap.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 30 }} [[
    // insert code here
  ]]
  exprPush {{ Venusflytrap.getProp('energyLevel').value / 200 }}
  featPropPop Venusflytrap.Costume.scale

  // this code sets the color of the energy bar based on how hungry the venusflytrp is
  // set venusflytrap energy meter color
  // doing great
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Venusflytrap.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Venusflytrap.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Venusflytrap.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Venusflytrap.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Venusflytrap.Graphing.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Venusflytrap.Costume.scale

  ]]
]]`
    },
    {
      "name": "Squirrel",
      "scriptText": `# BLUEPRINT Squirrel
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Squirrel is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Squirrel.Costume.costumeName setTo 'CP_squirrel.png'

addFeature Physics
featProp Squirrel.Costume.scale setTo 0.35

// types to use for energy transfer: 
addProp energyType String 'squirrel'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Squirrel.energyLevel setMax 100
prop Squirrel.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Squirrel lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Squirrel.Graphing.meterProp setTo 'energyLevel'

featProp Squirrel.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Squirrel.getProp('energyLevel').value - Squirrel.getProp('energyUse').value }}
  propPop Squirrel.energyLevel

  // this code sets the color of the energy bar based on how hungry the Squirrel is
  // sated
  ifExpr {{ Squirrel.getProp('energyLevel').value > 50 }} [[
    featProp Squirrel.Costume.currentFrame setTo 0
    // Green
    featProp Squirrel.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Squirrel.getProp('energyLevel').value < 50 }} [[
    featProp Squirrel.Costume.currentFrame setTo 1
    // Orange
    featProp Squirrel.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Squirrel.getProp('energyLevel').value < 20 }} [[
    featProp Squirrel.Costume.currentFrame setTo 1
    // Red
    featProp Squirrel.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Squirrel.getProp('energyLevel').value < 1 }} [[
    featProp Squirrel.Costume.currentFrame setTo 2
    prop Squirrel.alpha setTo 0.3
    prop Squirrel.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Squirrel.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Fly",
      "scriptText": `# BLUEPRINT Fly
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Fly is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Fly.Costume.costumeName setTo 'CP_fly.png'

addFeature Physics
featProp Fly.Costume.scale setTo 0.4

// types to use for energy transfer:
addProp energyType String 'fly'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Fly.energyLevel setMax 100
prop Fly.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Fly lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Fly.Graphing.meterProp setTo 'energyLevel'

featProp Fly.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Fly.getProp('energyLevel').value - Fly.getProp('energyUse').value }}
  propPop Fly.energyLevel

  // this code sets the color of the energy bar based on how hungry the Fly is
  // sated
  ifExpr {{ Fly.getProp('energyLevel').value > 50 }} [[
    featProp Fly.Costume.currentFrame setTo 0
    // Green
    featProp Fly.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Fly.getProp('energyLevel').value < 50 }} [[
    featProp Fly.Costume.currentFrame setTo 1
    // Orange
    featProp Fly.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Fly.getProp('energyLevel').value < 20 }} [[
    featProp Fly.Costume.currentFrame setTo 1
    // Red
    featProp Fly.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Fly.getProp('energyLevel').value < 1 }} [[
    featProp Fly.Costume.currentFrame setTo 2
    prop Fly.alpha setTo 0.3
    prop Fly.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Fly.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -199.1
prop y setTo -381.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky6",
      "bpid": "Sky",
      "initScript": `prop x setTo 2.36
prop y setTo -22.06`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 505.35
prop y setTo 317.49`
    },
    {
      "id": "21",
      "label": "Squash21",
      "bpid": "Squash",
      "initScript": `prop x setTo -2.34
prop y setTo 256.85`
    },
    {
      "id": "22",
      "label": "Venusflytrap22",
      "bpid": "Venusflytrap",
      "initScript": `prop x setTo 255.51
prop y setTo 253.73`
    },
    {
      "id": "23",
      "label": "Grass23",
      "bpid": "Grass",
      "initScript": `prop x setTo -274.34
prop y setTo 259.30`
    },
    {
      "id": "24",
      "label": "Squirrel24",
      "bpid": "Squirrel",
      "initScript": `prop x setTo -14
prop y setTo -5`
    },
    {
      "id": "25",
      "label": "Fly25",
      "bpid": "Fly",
      "initScript": `prop x setTo 204.71
prop y setTo -21.77`
    },
    {
      "id": "26",
      "label": "EnergyRepresentation26",
      "bpid": "EnergyRepresentation",
      "initScript": `prop x setTo -219.11
prop y setTo -218.76`
    }
  ]
}