{
  "id": "knowledge_building",
  "label": "Knowledge Building",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// hide this character since it is just for properties
prop global.visible setTo false

// add properties 
addProp placesVisited number 0
addProp natureVisited number 0

// track the collective scientiic knowledge of the community
// this will be updated in the KnowledgeMeter
addProp sharedScientificKnowledge number 1

// has anyone visited a conference to share knowledge with the public?
addProp conferenceVisited boolean false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Scientist",
      "scriptText": `# BLUEPRINT Scientist
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
// THOUGH WE WILL MAYBE DROP THE HAPPY VERSION THEN?
featProp Scientist.Costume.costumeName setTo 'PP_person_neutral.png'
featProp Scientist.Costume.scale setTo 0.5

// Add properties
addProp knowledge number 0
prop Scientist.knowledge setMax 100
prop Scientist.knowledge setMin 0

// setup meter to show the knowledge
featProp Scientist.Graphing.meterProp setTo 'knowledge'

// check if the scientist is visiting a place - see specif script below
featCall Scientist.Touches monitor 'Nature' b2b
featCall Scientist.Touches monitor 'Place' b2b

# PROGRAM UPDATE
// ============================================================
// SCIENTISTS, other updates
// ============================================================
every 1 runAtStart [[
  // ifProp Scientist.knowledge greaterThan 50 [[
  //   featProp Scientist.Costume.costumeName setTo 'PP_person_happy.png'
  // ]]
]]

// ============================================================
// SCIENTISTS interacting with NATURE
// ============================================================
when Scientist firstTouches Nature [[
  // note that we have a collaborator here 
  prop Nature.collaborators add 1

  // Change the art to show we have visited here 
  ifProp Nature.subType equal 'lake' [[ 
    featProp Nature.Costume.costumeName setTo 'KB_Nature_LakeVisited.png'
  ]]
  ifProp Nature.subType equal 'garden' [[ 
    featProp Nature.Costume.costumeName setTo 'KB_Nature_GardenVisited.png'
  ]]


  // Show what we are doing, which depends on how much the scientific community knows about this ecosystem
  ifProp global.sharedScientificKnowledge lessThan 100 [[
      ifProp Nature.subType equal 'lake' [[
        featCall Nature.Population createCharacter PopupMessage [[
          // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits a lake with only a little Knowledge
          prop PopupMessage.textToUse setTo 'Observing lake'
        ]]
      ]]

      ifProp Nature.subType equal 'garden' [[
        featCall Nature.Population createCharacter PopupMessage [[
          // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits a garden with only a little Knowledge
          prop PopupMessage.textToUse setTo 'Observing garden'
        ]]
      ]]
  ]]

  ifProp global.sharedScientificKnowledge greaterThan 100 [[
    ifProp Nature.subType equal 'lake' [[
      featCall Nature.Population createCharacter PopupMessage [[
        // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits a lake with only a little Knowledge
        prop PopupMessage.textToUse setTo 'Observing and helping lake'
      ]]
    ]]

    ifProp Nature.subType equal 'garden' [[
      featCall Nature.Population createCharacter PopupMessage [[
        // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits a garden with only a little Knowledge
        prop PopupMessage.textToUse setTo 'Observing and helping garden'
      ]]
    ]]
  ]]

  // check if someone has been here before. If not, not they have now
  ifProp Nature.wasVisited equal false [[
    prop Nature.wasVisited setTo true
    // show that another nature place was visited
    prop global.natureVisited add 1
  ]]
]]

when Scientist touches Nature [[
  every 1 runAtStart [[
    // construct knowledge depending on the kind of place and if others are there

    // üîé WHAT do scientists do in NATURE?
    // üîé Develop knowledge by observing, developing hypotheses, and running experiments

    // üîé If there is no one else there, building knowledge might be slow
    ifProp Nature.collaborators equal 0 [[
      prop Scientist.knowledge add 1
    ]]
    // üîé If there are people to collaborate with, knowledge building might go faster
    ifProp Nature.collaborators greaterThan 0 [[
      prop Scientist.knowledge add 2
    ]]

    // ‚úèÔ∏è LETS CHANGE THIS: What else impacts scientist's learning?
    // ‚úèÔ∏è For example, does it matter where else they have visited?
    ifProp global.placesVisited greaterThan 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having worked on these ideas helps? 
      dbgOut 'We have visited at least 1 human-made place before visiting a natural place'
    ]]

    ifProp global.natureVisited equal 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having observed this ecosystems helps? 
      dbgOut 'visiting the first natural place'
    ]]
    
    ifProp global.natureVisited greaterThan 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having observed different ecosystems helps? 
      dbgOut 'visiting a natural place when at least one other was visited'
    ]]

    // üîé Once they understand this ecosystem, scientists might be able to help them survive
    // üîé Does it always work this well, though?
    ifProp Scientist.knowledge greaterThan 50 [[
      prop Nature.health add 1
    ]]
  ]]
]]

when Scientist lastTouches Place [[
  prop Place.collaborators sub 1
]]

// ============================================================
// SCIENTISTS interacting with a human-made PLACE
// ============================================================
when Scientist firstTouches Place [[
  prop Place.collaborators add 1

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits home
  ifProp Place.type equal 'home' [[
    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at home' 
    ]]

    // also update the home art for this specific home
    featProp Place.Costume.costumeName setTo 'KB_Place_HomeVisited.png'
  ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits lab
  ifProp Place.type equal 'lab' [[

    ifProp Place.subType equal 'Ecology Lab' [[
      featProp Place.Costume.costumeName setTo 'KB_Place_EcologyLabVisited.png'
    ]]
    ifProp Place.subType equal 'Modeling Lab' [[
      featProp Place.Costume.costumeName setTo 'KB_Place_ModelingLabVisited.png'
    ]]
    ifProp Place.subType equal 'Embodied Modeling Lab' [[
      featProp Place.Costume.costumeName setTo 'KB_Place_EmbodiedModelingLabVisited.png'
    ]]
    
    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at lab' 
    ]]
  ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits a conference
  ifProp Place.type equal 'conference' [[
    featProp Place.Costume.costumeName setTo 'KB_Place_ConferenceVisited.png'

    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at conference' 
    ]]

    // Conferences are special, so also set the global
    prop global.conferenceVisited setTo true
  ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits office
  ifProp Place.type equal 'office' [[
    featProp Place.Costume.costumeName setTo 'KB_Place_OfficeVisited.png'

    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at office' 
    ]]
  ]]

    // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits store
    ifProp Place.type equal 'store' [[
      featProp Place.Costume.costumeName setTo 'KB_Place_GardenCenterVisited.png'

      featCall Place.Population createCharacter PopupMessage [[
        prop PopupMessage.textToUse setTo 'Doing Science! at store' 
      ]]
    ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits other1
  ifProp Place.type equal 'other1' [[
    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at other1' 
    ]]
  ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits other2
  ifProp Place.type equal 'other2' [[
    featCall Place.Population createCharacter PopupMessage [[
      prop PopupMessage.textToUse setTo 'Doing Science! at other2' 
    ]]
  ]]
  

  // check if someone has been here before. If not, not they have now
  ifProp Place.wasVisited equal false [[
    prop Place.wasVisited setTo true
    // show that another nature place was visited
    prop global.placesVisited add 1
  ]]

]]

when Scientist touches Place [[
  every 1 runAtStart [[
    // construct knowledge depending on the kind of place and if others are there

    // üîé WHAT do scientists do in other PLACES like labs and offices?
    // üîé Develop knowledge by observing, developing hypotheses, and running experiments

    // üîé If there is no one else there, building knowledge might be slow
    ifProp Place.collaborators equal 0 [[
      prop Scientist.knowledge add 1
    ]]
    // üîé If there are people to collaborate with, knowledge building might go faster
    ifProp Place.collaborators greaterThan 0 [[
      prop Scientist.knowledge add 2
    ]]

    // ‚úèÔ∏è LETS CHANGE THIS: What else impacts scientist's learning?
    // ‚úèÔ∏è For example, does it matter where else they have visited?
    ifProp global.placesVisited greaterThan 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having worked on ideas in several places helps? 
      dbgOut 'Visiting a place after having visited at least 2 places total'
    ]]

    ifProp global.natureVisited greaterThan 0 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having observed different ecosystems helps? 
      dbgOut 'Visiting a place after having visited at least 1 natural place'
    ]]

    // ‚úèÔ∏è LETS CHANGE THIS: Does it matter where we are?
    // ‚úèÔ∏è For example, do scientists think about the world at work or only the lab?
    ifProp Place.type equal 'home' [[
      // ‚úèÔ∏è Do something else like add extra knowledge in certain places?
      dbgOut 'We are at home thinking about our work ... '
    ]]


  ]]
]]

when Scientist lastTouches Place [[
  prop Place.collaborators sub 1
]]`
    },
    {
      "name": "Nature",
      "scriptText": `# BLUEPRINT Nature
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
featProp Nature.Costume.costumeName setTo 'GEN_square.json'
featCall Nature.Costume setColorizeHSV 0.3 0.5 0.8
featProp Nature.Costume.scale setTo 0.35


// Properties
// collaborators - start at -1 so that it requires 2 people at a place to have 1 collaborator
// how do we make sure the person already there gets it?
addProp collaborators number -1
addProp name string 'nature'

// Health of the natural ecosystem
addProp health number 50
prop Nature.health setMin 0
prop Nature.health setMax 100

// has a scientist been here before?
addProp wasVisited boolean false

// What kind of place is this? 
// You can put anything so long as the scientist touches code uses it
// This is the default. Change it in the map setup.
addProp type string 'ecosystem'

// use subtype for more specifics
addProp subType string 'ecosystem'


// set name to trackerId to make it easier to read the later code
propPush Nature.trackerId
propPop Nature.name

featProp Nature.Graphing.meterProp setTo 'health'
featProp Nature.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish
`
    },
    {
      "name": "Place",
      "scriptText": `# BLUEPRINT Place
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
featProp Place.Costume.costumeName setTo 'GEN_square.json'
featCall Place.Costume setColorizeHSV 0 0 0.8
featProp Place.Costume.scale setTo 0.25

// Properties
// collaborators - start at -1 so that it requires 2 people at a place to have 1 collaborator
// how do we make sure the person already there gets it?
addProp collaborators number -1
addProp name string 'place'

// has a scientist been here before?
addProp wasVisited boolean false

// What kind of place is this? 
// You can put anything so long as the scientist touches code uses it
// This is the default. Change it in the map setup.
addProp type string 'place'

// use the subType to change art
addProp subType string 'place'

// set name to trackerId to make it easier to read the later code
propPush Place.trackerId
propPop Place.name

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish`
    },
    {
      "name": "PopupMessage",
      "scriptText": `# BLUEPRINT PopupMessage
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population

featProp PopupMessage.Costume.costumeName setTo 'GEN_onexone.json'
featProp PopupMessage.Graphing.text setTo ''
prop PopupMessage.zIndex setTo 500

addProp costumeToUse string ''
addProp textToUse string ''
addProp countDown Number 3

# PROGRAM UPDATE

every 0.1 runAtStart [[
  ifProp PopupMessage.costumeToUse notEqual '' [[
    propPush PopupMessage.costumeToUse
    featPropPop PopupMessage.Costume.costumeName
    prop PopupMessage.costumeToUse setTo ''
  ]]

  ifProp PopupMessage.textToUse notEqual '' [[
    propPush PopupMessage.textToUse
    featPropPop PopupMessage.Graphing.text
    prop PopupMessage.textToUse setTo ''
  ]]
]]
every 1 runAtStart [[
  prop PopupMessage.countDown sub 1
  ifExpr {{ PopupMessage.getProp('countDown').value == 0 }} [[
    featCall PopupMessage.Population removeCharacter
  ]]
]]
`
    },
    {
      "name": "KnowledgeMeter",
      "scriptText": `# BLUEPRINT KnowledgeMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Population
addFeature Graphing

featProp KnowledgeMeter.Costume.costumeName setTo 'GEN_square.json'
featProp KnowledgeMeter.Costume.width setTo 50
featProp KnowledgeMeter.Costume.height setTo 1

addProp sharedScientificKnowledge number 1

addProp meterY number 0

featProp KnowledgeMeter.Graphing.text setTo 'Science Knowledge'

# PROGRAM UPDATE

every 1 runAtStart [[
  // sum the knowledge of all scientists 
  featCall KnowledgeMeter.Population countCharacterProp 'Scientist' 'knowledge'
  featPropPush KnowledgeMeter.Population.sum
  propPop KnowledgeMeter.sharedScientificKnowledge

  // update the shared variable in global
  propPush KnowledgeMeter.sharedScientificKnowledge
  propPop global.sharedScientificKnowledge

  // scale it up to span the screen with a bottom of just high enough to show the text
  // prop KnowledgeMeter.sharedScientificKnowledge mul 7.25

  // use the scaled number to set the meter height - but only if it is greater than 0 otherwise funny things happen
  ifProp KnowledgeMeter.sharedScientificKnowledge greaterThan 0 [[
    propPush KnowledgeMeter.sharedScientificKnowledge
    featPropPop KnowledgeMeter.Costume.height
  ]]

  // now use the height to set the y value since we position based on center of the object (not bottom)
  propPush KnowledgeMeter.sharedScientificKnowledge
  propPop KnowledgeMeter.meterY
  prop KnowledgeMeter.meterY div -2
  prop KnowledgeMeter.meterY add 325

  propPush KnowledgeMeter.meterY
  propPop KnowledgeMeter.y

]]


// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "KnowledgePresented",
      "scriptText": `# BLUEPRINT KnowledgePresented
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp KnowledgePresented.Costume.costumeName setTo 'KB_ConferenceNotPresented.png'
featProp KnowledgePresented.Costume.scale setTo 0.3

# PROGRAM UPDATE
every 0.5 runAfter [[
  ifProp global.conferenceVisited equal true [[
    featProp KnowledgePresented.Costume.costumeName setTo 'KB_ConferencePresented.png'
  ]]
]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Lake",
      "bpid": "Nature",
      "initScript": `prop x setTo -88.09
prop y setTo -234.72
prop Nature.subType setTo 'lake'
featProp Nature.Costume.costumeName setTo 'KB_Nature_LakeUnvisited.png'
`
    },
    {
      "id": "2",
      "label": "Ecology Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 251.92
prop y setTo -258.01
prop Place.type setTo 'lab'
prop Place.subType setTo 'Ecology Lab'
featProp Place.Costume.costumeName setTo 'KB_Place_EcologyLabUnvisited.png'

`
    },
    {
      "id": "3",
      "label": "Modeling Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 255.66
prop y setTo -65.54
prop Place.type setTo 'lab'
prop Place.subType setTo 'Modeling Lab'
featProp Place.Costume.costumeName setTo 'KB_Place_ModelingLabUnvisited.png'

`
    },
    {
      "id": "4",
      "label": "Office",
      "bpid": "Place",
      "initScript": `prop x setTo 259.88
prop y setTo 122.19
prop Place.type setTo 'office'
prop Place.subType setTo 'office'
featProp Place.Costume.costumeName setTo 'KB_Place_OfficeNotvisited.png'

`
    },
    {
      "id": "5",
      "label": "Garden",
      "bpid": "Nature",
      "initScript": `prop x setTo -245.94
prop y setTo -64.65
prop Nature.subType setTo 'garden'
featProp Nature.Costume.costumeName setTo 'KB_Nature_GardenUnvisited.png'

`
    },
    {
      "id": "6",
      "label": "Home 1",
      "bpid": "Place",
      "initScript": `prop x setTo -276.42
prop y setTo -255.41
prop Place.type setTo 'home'
prop Place.subType setTo 'home'
featProp Place.Costume.costumeName setTo 'KB_Place_HomeUnvisited.png'
`
    },
    {
      "id": "7",
      "label": "Home 2",
      "bpid": "Place",
      "initScript": `prop x setTo -85.72
prop y setTo 266.84
prop Place.type setTo 'home'
prop Place.subType setTo 'home'
featProp Place.Costume.costumeName setTo 'KB_Place_HomeUnvisited.png'
`
    },
    {
      "id": "8",
      "label": "Garden Center",
      "bpid": "Place",
      "initScript": `prop x setTo -274.11
prop y setTo 232.75
prop Place.type setTo 'store'
prop Place.subType setTo 'Garden Center'
featProp Place.Costume.costumeName setTo 'KB_Place_GardenCenterNotvisited.png'

`
    },
    {
      "id": "10",
      "label": "Knowledge Meter",
      "bpid": "KnowledgeMeter",
      "initScript": `prop x setTo 440
prop y setTo 325`
    },
    {
      "id": "11",
      "label": "Embodied Modeling Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 93.50
prop y setTo 242.75
prop Place.type setTo 'lab'
prop Place.subType setTo 'Embodied Modeling Lab'
featProp Place.Costume.costumeName setTo 'KB_Place_EmbodiedModelingLabUnvisited.png'

`
    },
    {
      "id": "12",
      "label": "Conference",
      "bpid": "Place",
      "initScript": `prop x setTo 264.44
prop y setTo 275.74
prop Place.type setTo 'conference'
prop Place.subType setTo 'conference'
featProp Place.Costume.costumeName setTo 'KB_Place_ConferenceUnvisited.png'
`
    },
    {
      "id": "13",
      "label": "KnowledgePresented13",
      "bpid": "KnowledgePresented",
      "initScript": `prop x setTo 86.53
prop y setTo -355.82`
    }
  ]
}